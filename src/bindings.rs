/* automatically generated by rust-bindgen 0.60.1 */

pub const pxINCLUDE_OGGVORBIS: u32 = 1;
pub const _STL_COMPILER_PREPROCESSOR: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const _STL_WARNING_LEVEL: u32 = 3;
pub const _HAS_CONDITIONAL_EXPLICIT: u32 = 1;
pub const _STL_DISABLED_WARNING_C4984: u32 = 4984;
pub const _STL_DISABLED_WARNING_C5053: u32 = 5053;
pub const _CPPLIB_VER: u32 = 650;
pub const _MSVC_STL_VERSION: u32 = 143;
pub const _MSVC_STL_UPDATE: u32 = 202205;
pub const _HAS_STATIC_RTTI: u32 = 1;
pub const _HAS_STD_BYTE: u32 = 0;
pub const _ENFORCE_MATCHING_ALLOCATORS: u32 = 0;
pub const _ENFORCE_FACET_SPECIALIZATIONS: u32 = 0;
pub const _FACET_SPECIALIZATION_MESSAGE : & [u8 ; 183usize] = b"Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 to suppress this diagnostic.\0" ;
pub const _STL_OPTIMIZE_SYSTEM_ERROR_OPERATORS: u32 = 1;
pub const _STD_VECTORIZE_WITH_FLOAT_CONTROL: u32 = 1;
pub const __cpp_lib_chrono_udls: u32 = 201304;
pub const __cpp_lib_complex_udls: u32 = 201309;
pub const __cpp_lib_exchange_function: u32 = 201304;
pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
pub const __cpp_lib_integer_sequence: u32 = 201304;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const __cpp_lib_make_unique: u32 = 201304;
pub const __cpp_lib_null_iterators: u32 = 201304;
pub const __cpp_lib_quoted_string_io: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const __cpp_lib_shared_timed_mutex: u32 = 201402;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_tuple_element_t: u32 = 201402;
pub const __cpp_lib_tuples_by_type: u32 = 201304;
pub const __cpp_lib_addressof_constexpr: u32 = 201603;
pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
pub const __cpp_lib_as_const: u32 = 201510;
pub const __cpp_lib_bool_constant: u32 = 201505;
pub const __cpp_lib_enable_shared_from_this: u32 = 201603;
pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
pub const __cpp_lib_invoke: u32 = 201411;
pub const __cpp_lib_logical_traits: u32 = 201510;
pub const __cpp_lib_map_try_emplace: u32 = 201411;
pub const __cpp_lib_nonmember_container_access: u32 = 201411;
pub const __cpp_lib_shared_mutex: u32 = 201505;
pub const __cpp_lib_transparent_operators: u32 = 201510;
pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
pub const __cpp_lib_unordered_map_try_emplace: u32 = 201411;
pub const __cpp_lib_void_t: u32 = 201411;
pub const __cpp_lib_atomic_value_initialization: u32 = 201911;
pub const __cpp_lib_chrono: u32 = 201510;
pub const __cpp_lib_shared_ptr_arrays: u32 = 201611;
pub const __cpp_lib_experimental_erase_if: u32 = 201411;
pub const __cpp_lib_experimental_filesystem: u32 = 201406;
pub const _STL_WIN32_WINNT_VISTA: u32 = 1536;
pub const _STL_WIN32_WINNT_WIN8: u32 = 1538;
pub const _STL_WIN32_WINNT_WINBLUE: u32 = 1539;
pub const _STL_WIN32_WINNT_WIN10: u32 = 2560;
pub const _STL_WIN32_WINNT: u32 = 1536;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 1usize] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const _DOMAIN: u32 = 1;
pub const _SING: u32 = 2;
pub const _OVERFLOW: u32 = 3;
pub const _UNDERFLOW: u32 = 4;
pub const _TLOSS: u32 = 5;
pub const _PLOSS: u32 = 6;
pub const _HUGE_ENUF : f64 = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 ;
pub const _DENORM: i32 = -2;
pub const _FINITE: i32 = -1;
pub const _INFCODE: u32 = 1;
pub const _NANCODE: u32 = 2;
pub const _C2: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: u32 = 2147483647;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const _FE_DIVBYZERO: u32 = 4;
pub const _FE_INEXACT: u32 = 32;
pub const _FE_INVALID: u32 = 1;
pub const _FE_OVERFLOW: u32 = 8;
pub const _FE_UNDERFLOW: u32 = 16;
pub const _D0_C: u32 = 3;
pub const _D1_C: u32 = 2;
pub const _D2_C: u32 = 1;
pub const _D3_C: u32 = 0;
pub const _DBIAS: u32 = 1022;
pub const _DOFF: u32 = 4;
pub const _F0_C: u32 = 1;
pub const _F1_C: u32 = 0;
pub const _FBIAS: u32 = 126;
pub const _FOFF: u32 = 7;
pub const _FRND: u32 = 1;
pub const _L0_C: u32 = 3;
pub const _L1_C: u32 = 2;
pub const _L2_C: u32 = 1;
pub const _L3_C: u32 = 0;
pub const _LBIAS: u32 = 1022;
pub const _LOFF: u32 = 4;
pub const _FP_LT: u32 = 1;
pub const _FP_EQ: u32 = 2;
pub const _FP_GT: u32 = 4;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const pxtnMAX_CHANNEL: u32 = 2;
pub const pxtnMAX_TUNEUNITSTRUCT: u32 = 50;
pub const pxtnMAX_TUNEWOICESTRUCT: u32 = 100;
pub const pxtnMAX_EVENTNUM: u32 = 500000;
pub const pxtnMAX_TUNEGROUPNUM: u32 = 7;
pub const pxtnMAX_TUNEDELAYSTRUCT: u32 = 4;
pub const pxtnMAX_TUNEOVERDRIVESTRUCT: u32 = 2;
pub const pxtnMAX_STREAMINGVOICE: u32 = 10;
pub const pxtnMAX_RELEASEPOINT: u32 = 1;
pub const CLOCK_ROUGH: u32 = 10;
pub const pxtnMAX_TUNEUNITNAME: u32 = 16;
pub const TUNEOVERDRIVE_CUT_MAX: f64 = 99.9;
pub const TUNEOVERDRIVE_CUT_MIN: f64 = 50.0;
pub const TUNEOVERDRIVE_AMP_MAX: f64 = 8.0;
pub const TUNEOVERDRIVE_AMP_MIN: f64 = 0.1;
pub const TUNEOVERDRIVE_DEFAULT_CUT: f64 = 90.0;
pub const TUNEOVERDRIVE_DEFAULT_AMP: f64 = 2.0;
pub const pxtnMAX_TUNEWOICENAME: u32 = 16;
pub const pxtnMAX_UNITCONTROLVOICE: u32 = 2;
pub const pxtnBUFSIZE_TIMEPAN: u32 = 64;
pub const pxtnBITPERSAMPLE: u32 = 16;
pub const PTV_VOICEFLAG_WAVELOOP: u32 = 1;
pub const PTV_VOICEFLAG_SMOOTH: u32 = 2;
pub const PTV_VOICEFLAG_BEATFIT: u32 = 4;
pub const PTV_VOICEFLAG_UNCOVERED: u32 = 4294967288;
pub const PTV_DATAFLAG_WAVE: u32 = 1;
pub const PTV_DATAFLAG_ENVELOPE: u32 = 2;
pub const PTV_DATAFLAG_UNCOVERED: u32 = 4294967292;
pub const EVENTDEFAULT_VOLUME: u32 = 104;
pub const EVENTDEFAULT_VELOCITY: u32 = 104;
pub const EVENTDEFAULT_PAN_VOLUME: u32 = 64;
pub const EVENTDEFAULT_PAN_TIME: u32 = 64;
pub const EVENTDEFAULT_PORTAMENT: u32 = 0;
pub const EVENTDEFAULT_VOICENO: u32 = 0;
pub const EVENTDEFAULT_GROUPNO: u32 = 0;
pub const EVENTDEFAULT_KEY: u32 = 24576;
pub const EVENTDEFAULT_BASICKEY: u32 = 17664;
pub const EVENTDEFAULT_TUNING: f64 = 1.0;
pub const EVENTDEFAULT_BEATNUM: u32 = 4;
pub const EVENTDEFAULT_BEATTEMPO: u32 = 120;
pub const EVENTDEFAULT_BEATCLOCK: u32 = 480;
pub const PXTONEERRORSIZE: u32 = 64;
pub const pxtnVOMITPREPFLAG_loop: u32 = 1;
pub const pxtnVOMITPREPFLAG_unit_mute: u32 = 2;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __vcrt_va_list_is_reference___the_value: __vcrt_va_list_is_reference__bindgen_ty_1 =
    false;
pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const u16,
        _FunctionName: *const u16,
        _FileName: *const u16,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    fn test_field__locale_pctype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_pctype)
            )
        );
    }
    test_field__locale_pctype();
    fn test_field__locale_mb_cur_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_mb_cur_max)
            )
        );
    }
    test_field__locale_mb_cur_max();
    fn test_field__locale_lc_codepage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_lc_codepage)
            )
        );
    }
    test_field__locale_lc_codepage();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    fn test_field_locinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_pointers>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_pointers),
                "::",
                stringify!(locinfo)
            )
        );
    }
    test_field_locinfo();
    fn test_field_mbcinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_pointers>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_pointers),
                "::",
                stringify!(mbcinfo)
            )
        );
    }
    test_field_mbcinfo();
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    fn test_field__Wchar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_Wchar)
            )
        );
    }
    test_field__Wchar();
    fn test_field__Byte() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_Byte)
            )
        );
    }
    test_field__Byte();
    fn test_field__State() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_State)
            )
        );
    }
    test_field__State();
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _calloc_base(_Count: size_t, _Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(_Count: size_t, _Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: size_t, _Alignment: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
pub type max_align_t = f64;
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
extern "C" {
    pub fn wcstod(_String: *const u16, _EndPtr: *mut *mut u16) -> f64;
}
extern "C" {
    pub fn _wcstod_l(_String: *const u16, _EndPtr: *mut *mut u16, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const u16, _EndPtr: *mut *mut u16) -> f64;
}
extern "C" {
    pub fn _wcstold_l(_String: *const u16, _EndPtr: *mut *mut u16, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const u16, _EndPtr: *mut *mut u16) -> f32;
}
extern "C" {
    pub fn _wcstof_l(_String: *const u16, _EndPtr: *mut *mut u16, _Locale: _locale_t) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const u16) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const u16, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const u16) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const u16) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
extern "C" {
    pub fn _wtoi64(_String: *const u16) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(_Buffer: *mut u16, _Path: *const u16, _BufferCount: size_t) -> *mut u16;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Drive: *const u16,
        _Dir: *const u16,
        _Filename: *const u16,
        _Ext: *const u16,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut u16,
        _Drive: *const u16,
        _Dir: *const u16,
        _Filename: *const u16,
        _Ext: *const u16,
    );
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const u16);
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const u16,
        _Drive: *mut u16,
        _Dir: *mut u16,
        _Filename: *mut u16,
        _Ext: *mut u16,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const u16,
        _Drive: *mut u16,
        _DriveCount: size_t,
        _Dir: *mut u16,
        _DirCount: size_t,
        _Filename: *mut u16,
        _FilenameCount: size_t,
        _Ext: *mut u16,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut u16,
        _BufferCount: *mut size_t,
        _VarName: *const u16,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const u16) -> *mut u16;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _VarName: *const u16,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const u16, _Value: *const u16) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const u16,
        _VarName: *const u16,
        _Buffer: *mut u16,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(_Filename: *const u16, _VarName: *const u16, _ResultPath: *mut u16);
}
extern "C" {
    pub fn _wsystem(_Command: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const u16,
        arg2: *const u16,
        arg3: *const u16,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut u16;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut u16) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_div_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_div_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_div_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_div_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_ldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_ldiv_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_ldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_ldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_lldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_lldiv_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_lldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_lldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    fn test_field_ld() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDOUBLE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ld) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDOUBLE),
                "::",
                stringify!(ld)
            )
        );
    }
    test_field_ld();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_CRT_DOUBLE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_CRT_DOUBLE),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    fn test_field_f() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_CRT_FLOAT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_CRT_FLOAT),
                "::",
                stringify!(f)
            )
        );
    }
    test_field_f();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LONGDOUBLE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LONGDOUBLE),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    fn test_field_ld12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDBL12>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ld12) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDBL12),
                "::",
                stringify!(ld12)
            )
        );
    }
    test_field_ld12();
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut u16,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut u16,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut u16,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut u16,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut u16,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut u16,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: u16,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _WCh: u16,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const u16,
        _MaxCountInBytes: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const u16,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const u16,
        _MaxCountInBytes: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const u16,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: size_t,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: size_t,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: size_t,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut u16;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut u16;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut size_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn memchr(
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strchr(
        _Str: *const ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        _Str: *const ::std::os::raw::c_char,
        _Ch: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcschr(_Str: *const u16, _Ch: u16) -> *const u16;
}
extern "C" {
    pub fn wcsrchr(_Str: *const u16, _Ch: u16) -> *const u16;
}
extern "C" {
    pub fn wcsstr(_Str: *const u16, _SubStr: *const u16) -> *const u16;
}
extern "C" {
    pub fn _memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscat_s(_Destination: *mut u16, _SizeInWords: rsize_t, _Source: *const u16) -> errno_t;
}
extern "C" {
    pub fn wcscpy_s(_Destination: *mut u16, _SizeInWords: rsize_t, _Source: *const u16) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut u16,
        _SizeInWords: rsize_t,
        _Source: *const u16,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut u16,
        _SizeInWords: rsize_t,
        _Source: *const u16,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(_String: *mut u16, _Delimiter: *const u16, _Context: *mut *mut u16)
        -> *mut u16;
}
extern "C" {
    pub fn _wcsdup(_String: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcscat(_Destination: *mut u16, _Source: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcscmp(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(_Destination: *mut u16, _Source: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcscspn(_String: *const u16, _Control: *const u16) -> size_t;
}
extern "C" {
    pub fn wcslen(_String: *const u16) -> size_t;
}
extern "C" {
    pub fn wcsnlen(_Source: *const u16, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn wcsncat(_Destination: *mut u16, _Source: *const u16, _Count: size_t) -> *mut u16;
}
extern "C" {
    pub fn wcsncmp(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(_Destination: *mut u16, _Source: *const u16, _Count: size_t) -> *mut u16;
}
extern "C" {
    pub fn wcspbrk(_String: *const u16, _Control: *const u16) -> *const u16;
}
extern "C" {
    pub fn wcsspn(_String: *const u16, _Control: *const u16) -> size_t;
}
extern "C" {
    pub fn wcstok(_String: *mut u16, _Delimiter: *const u16, _Context: *mut *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wcserror(_ErrorNumber: ::std::os::raw::c_int) -> *mut u16;
}
extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut u16,
        _SizeInWords: size_t,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn __wcserror(_String: *const u16) -> *mut u16;
}
extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut u16,
        _SizeInWords: size_t,
        _ErrorMessage: *const u16,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsicmp(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const u16,
        _String2: *const u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut u16,
        _SizeInWords: size_t,
        _Value: u16,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsnset(_String: *mut u16, _Value: u16, _MaxCount: size_t) -> *mut u16;
}
extern "C" {
    pub fn _wcsrev(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wcsset_s(_Destination: *mut u16, _SizeInWords: size_t, _Value: u16) -> errno_t;
}
extern "C" {
    pub fn _wcsset(_String: *mut u16, _Value: u16) -> *mut u16;
}
extern "C" {
    pub fn _wcslwr_s(_String: *mut u16, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wcslwr_s_l(_String: *mut u16, _SizeInWords: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut u16, _Locale: _locale_t) -> *mut u16;
}
extern "C" {
    pub fn _wcsupr_s(_String: *mut u16, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wcsupr_s_l(_String: *mut u16, _Size: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut u16, _Locale: _locale_t) -> *mut u16;
}
extern "C" {
    pub fn wcsxfrm(_Destination: *mut u16, _Source: *const u16, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut u16,
        _Source: *const u16,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcscoll(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcscoll_l(
        _String1: *const u16,
        _String2: *const u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const u16,
        _String2: *const u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsdup(_String: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcsicmp(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnicmp(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnset(_String: *mut u16, _Value: u16, _MaxCount: size_t) -> *mut u16;
}
extern "C" {
    pub fn wcsrev(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn wcsset(_String: *mut u16, _Value: u16) -> *mut u16;
}
extern "C" {
    pub fn wcslwr(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn wcsupr(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn wcsicoll(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strcat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn strncat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strncpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strtok_s(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
        _Context: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn _strdup(_Source: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror(_ErrorMessage: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _ErrorMessage: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror(_ErrorMessage: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn _strlwr_s(_String: *mut ::std::os::raw::c_char, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strlwr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strlwr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __strncnt(_String: *const ::std::os::raw::c_char, _Count: size_t) -> size_t;
}
extern "C" {
    pub fn strncpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(_String: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _strnset_s(
        _String: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Value: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strnset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _Count: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strset_s(
        _Destination: *mut ::std::os::raw::c_char,
        _DestinationSize: size_t,
        _Value: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _strset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn strtok(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s(_String: *mut ::std::os::raw::c_char, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strupr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _strxfrm_l(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(_String: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strnset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrev(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    fn test_field__Placeholder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_iobuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Placeholder) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_iobuf),
                "::",
                stringify!(_Placeholder)
            )
        );
    }
    test_field__Placeholder();
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: u16, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: u16) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut u16,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut u16;
}
extern "C" {
    pub fn fputws(_Buffer: *const u16, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut u16, _BufferCount: size_t) -> *mut u16;
}
extern "C" {
    pub fn putwc(_Character: u16, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: u16) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const u16) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const u16, _Mode: *const u16) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(_Stream: *mut *mut FILE, _FileName: *const u16, _Mode: *const u16) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(_FileName: *const u16, _Mode: *const u16, _OldStream: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const u16,
        _Mode: *const u16,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const u16,
        _Mode: *const u16,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wpopen(_Command: *const u16, _Mode: *const u16) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const u16, _FilePrefix: *const u16) -> *mut u16;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut u16, _BufferCount: size_t) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: u16, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: u16, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const u16,
        _BufferCount: size_t,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout__exception() {
    assert_eq!(
        ::std::mem::size_of::<_exception>(),
        40usize,
        concat!("Size of: ", stringify!(_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<_exception>(),
        8usize,
        concat!("Alignment of ", stringify!(_exception))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_exception>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_exception),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_exception>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_exception),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_arg1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_exception>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg1) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_exception),
                "::",
                stringify!(arg1)
            )
        );
    }
    test_field_arg1();
    fn test_field_arg2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_exception>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg2) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_exception),
                "::",
                stringify!(arg2)
            )
        );
    }
    test_field_arg2();
    fn test_field_retval() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_exception>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).retval) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_exception),
                "::",
                stringify!(retval)
            )
        );
    }
    test_field_retval();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _complex {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout__complex() {
    assert_eq!(
        ::std::mem::size_of::<_complex>(),
        16usize,
        concat!("Size of: ", stringify!(_complex))
    );
    assert_eq!(
        ::std::mem::align_of::<_complex>(),
        8usize,
        concat!("Alignment of ", stringify!(_complex))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_complex>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_complex),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_complex>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_complex),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub static _HUGE: f64;
}
extern "C" {
    pub fn _fperrraise(_Except: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _dclass(_X: f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldclass(_X: f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdclass(_X: f32) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dsign(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ldsign(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdsign(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _dpcomp(_X: f64, _Y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ldpcomp(_X: f64, _Y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdpcomp(_X: f32, _Y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _dtest(_Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldtest(_Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdtest(_Px: *mut f32) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _d_int(_Px: *mut f64, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ld_int(_Px: *mut f64, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fd_int(_Px: *mut f32, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dscale(_Px: *mut f64, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldscale(_Px: *mut f64, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdscale(_Px: *mut f32, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f64)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f32)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dexp(_Px: *mut f64, _Y: f64, _Eoff: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldexp(_Px: *mut f64, _Y: f64, _Eoff: ::std::os::raw::c_long)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdexp(_Px: *mut f32, _Y: f32, _Eoff: ::std::os::raw::c_long)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dnorm(_Ps: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdnorm(_Ps: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dpoly(_X: f64, _Tab: *const f64, _N: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _ldpoly(_X: f64, _Tab: *const f64, _N: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _fdpoly(_X: f32, _Tab: *const f32, _N: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn _dlog(_X: f64, _Baseflag: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _ldlog(_X: f64, _Baseflag: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _fdlog(_X: f32, _Baseflag: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn _dsin(_X: f64, _Qoff: ::std::os::raw::c_uint) -> f64;
}
extern "C" {
    pub fn _ldsin(_X: f64, _Qoff: ::std::os::raw::c_uint) -> f64;
}
extern "C" {
    pub fn _fdsin(_X: f32, _Qoff: ::std::os::raw::c_uint) -> f32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _double_val {
    pub _Sh: [::std::os::raw::c_ushort; 4usize],
    pub _Val: f64,
}
#[test]
fn bindgen_test_layout__double_val() {
    assert_eq!(
        ::std::mem::size_of::<_double_val>(),
        8usize,
        concat!("Size of: ", stringify!(_double_val))
    );
    assert_eq!(
        ::std::mem::align_of::<_double_val>(),
        8usize,
        concat!("Alignment of ", stringify!(_double_val))
    );
    fn test_field__Sh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_double_val>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Sh) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_double_val),
                "::",
                stringify!(_Sh)
            )
        );
    }
    test_field__Sh();
    fn test_field__Val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_double_val>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_double_val),
                "::",
                stringify!(_Val)
            )
        );
    }
    test_field__Val();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _float_val {
    pub _Sh: [::std::os::raw::c_ushort; 2usize],
    pub _Val: f32,
}
#[test]
fn bindgen_test_layout__float_val() {
    assert_eq!(
        ::std::mem::size_of::<_float_val>(),
        4usize,
        concat!("Size of: ", stringify!(_float_val))
    );
    assert_eq!(
        ::std::mem::align_of::<_float_val>(),
        4usize,
        concat!("Alignment of ", stringify!(_float_val))
    );
    fn test_field__Sh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_float_val>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Sh) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_float_val),
                "::",
                stringify!(_Sh)
            )
        );
    }
    test_field__Sh();
    fn test_field__Val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_float_val>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_float_val),
                "::",
                stringify!(_Val)
            )
        );
    }
    test_field__Val();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ldouble_val {
    pub _Sh: [::std::os::raw::c_ushort; 4usize],
    pub _Val: f64,
}
#[test]
fn bindgen_test_layout__ldouble_val() {
    assert_eq!(
        ::std::mem::size_of::<_ldouble_val>(),
        8usize,
        concat!("Size of: ", stringify!(_ldouble_val))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldouble_val>(),
        8usize,
        concat!("Alignment of ", stringify!(_ldouble_val))
    );
    fn test_field__Sh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_ldouble_val>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Sh) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_ldouble_val),
                "::",
                stringify!(_Sh)
            )
        );
    }
    test_field__Sh();
    fn test_field__Val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_ldouble_val>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_ldouble_val),
                "::",
                stringify!(_Val)
            )
        );
    }
    test_field__Val();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _float_const {
    pub _Word: [::std::os::raw::c_ushort; 4usize],
    pub _Float: f32,
    pub _Double: f64,
    pub _Long_double: f64,
}
#[test]
fn bindgen_test_layout__float_const() {
    assert_eq!(
        ::std::mem::size_of::<_float_const>(),
        8usize,
        concat!("Size of: ", stringify!(_float_const))
    );
    assert_eq!(
        ::std::mem::align_of::<_float_const>(),
        8usize,
        concat!("Alignment of ", stringify!(_float_const))
    );
    fn test_field__Word() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_float_const>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Word) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_float_const),
                "::",
                stringify!(_Word)
            )
        );
    }
    test_field__Word();
    fn test_field__Float() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_float_const>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Float) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_float_const),
                "::",
                stringify!(_Float)
            )
        );
    }
    test_field__Float();
    fn test_field__Double() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_float_const>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Double) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_float_const),
                "::",
                stringify!(_Double)
            )
        );
    }
    test_field__Double();
    fn test_field__Long_double() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_float_const>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Long_double) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_float_const),
                "::",
                stringify!(_Long_double)
            )
        );
    }
    test_field__Long_double();
}
extern "C" {
    pub static _Denorm_C: _float_const;
}
extern "C" {
    pub static _Inf_C: _float_const;
}
extern "C" {
    pub static _Nan_C: _float_const;
}
extern "C" {
    pub static _Snan_C: _float_const;
}
extern "C" {
    pub static _Hugeval_C: _float_const;
}
extern "C" {
    pub static _FDenorm_C: _float_const;
}
extern "C" {
    pub static _FInf_C: _float_const;
}
extern "C" {
    pub static _FNan_C: _float_const;
}
extern "C" {
    pub static _FSnan_C: _float_const;
}
extern "C" {
    pub static _LDenorm_C: _float_const;
}
extern "C" {
    pub static _LInf_C: _float_const;
}
extern "C" {
    pub static _LNan_C: _float_const;
}
extern "C" {
    pub static _LSnan_C: _float_const;
}
extern "C" {
    pub static _Eps_C: _float_const;
}
extern "C" {
    pub static _Rteps_C: _float_const;
}
extern "C" {
    pub static _FEps_C: _float_const;
}
extern "C" {
    pub static _FRteps_C: _float_const;
}
extern "C" {
    pub static _LEps_C: _float_const;
}
extern "C" {
    pub static _LRteps_C: _float_const;
}
extern "C" {
    pub static _Zero_C: f64;
}
extern "C" {
    pub static _Xbig_C: f64;
}
extern "C" {
    pub static _FZero_C: f32;
}
extern "C" {
    pub static _FXbig_C: f32;
}
extern "C" {
    pub static _LZero_C: f64;
}
extern "C" {
    pub static _LXbig_C: f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Combined_type {
    pub _address: u8,
}
pub type _Combined_type__Type = f32;
#[test]
fn __bindgen_test_layout__Combined_type_open0_float_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<_Combined_type>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(_Combined_type)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_Combined_type>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(_Combined_type)
        )
    );
}
#[test]
fn __bindgen_test_layout__Combined_type_open0_float_long_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<_Combined_type>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(_Combined_type)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_Combined_type>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(_Combined_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Real_widened {
    pub _address: u8,
}
pub type _Real_widened__Type = f64;
#[test]
fn __bindgen_test_layout__Real_widened_open0_float_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<_Real_widened>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(_Real_widened)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_Real_widened>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(_Real_widened)
        )
    );
}
#[test]
fn __bindgen_test_layout__Real_widened_open0_float_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<_Real_widened>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(_Real_widened)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_Real_widened>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(_Real_widened)
        )
    );
}
#[test]
fn __bindgen_test_layout__Real_widened_open0_double_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<_Real_widened>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(_Real_widened)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_Real_widened>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(_Real_widened)
        )
    );
}
#[test]
fn __bindgen_test_layout__Real_widened_open0_double_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<_Real_widened>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(_Real_widened)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_Real_widened>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(_Real_widened)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Real_type {
    pub _address: u8,
}
pub type _Real_type__Type = f64;
#[test]
fn __bindgen_test_layout__Real_type_open0_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<_Real_type>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(_Real_type))
    );
    assert_eq!(
        ::std::mem::align_of::<_Real_type>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(_Real_type)
        )
    );
}
#[test]
fn __bindgen_test_layout__Real_type_open0_long_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<_Real_type>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(_Real_type))
    );
    assert_eq!(
        ::std::mem::align_of::<_Real_type>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(_Real_type)
        )
    );
}
extern "C" {
    pub fn acos(_X: f64) -> f64;
}
extern "C" {
    pub fn asin(_X: f64) -> f64;
}
extern "C" {
    pub fn atan(_X: f64) -> f64;
}
extern "C" {
    pub fn atan2(_Y: f64, _X: f64) -> f64;
}
extern "C" {
    pub fn cos(_X: f64) -> f64;
}
extern "C" {
    pub fn cosh(_X: f64) -> f64;
}
extern "C" {
    pub fn exp(_X: f64) -> f64;
}
extern "C" {
    pub fn fabs(_X: f64) -> f64;
}
extern "C" {
    pub fn fmod(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn log(_X: f64) -> f64;
}
extern "C" {
    pub fn log10(_X: f64) -> f64;
}
extern "C" {
    pub fn pow(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn sin(_X: f64) -> f64;
}
extern "C" {
    pub fn sinh(_X: f64) -> f64;
}
extern "C" {
    pub fn sqrt(_X: f64) -> f64;
}
extern "C" {
    pub fn tan(_X: f64) -> f64;
}
extern "C" {
    pub fn tanh(_X: f64) -> f64;
}
extern "C" {
    pub fn acosh(_X: f64) -> f64;
}
extern "C" {
    pub fn asinh(_X: f64) -> f64;
}
extern "C" {
    pub fn atanh(_X: f64) -> f64;
}
extern "C" {
    pub fn _cabs(_Complex_value: _complex) -> f64;
}
extern "C" {
    pub fn cbrt(_X: f64) -> f64;
}
extern "C" {
    pub fn ceil(_X: f64) -> f64;
}
extern "C" {
    pub fn _chgsign(_X: f64) -> f64;
}
extern "C" {
    pub fn copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn _copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn erf(_X: f64) -> f64;
}
extern "C" {
    pub fn erfc(_X: f64) -> f64;
}
extern "C" {
    pub fn exp2(_X: f64) -> f64;
}
extern "C" {
    pub fn expm1(_X: f64) -> f64;
}
extern "C" {
    pub fn fdim(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn floor(_X: f64) -> f64;
}
extern "C" {
    pub fn fma(_X: f64, _Y: f64, _Z: f64) -> f64;
}
extern "C" {
    pub fn fmax(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fmin(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn frexp(_X: f64, _Y: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn hypot(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn _hypot(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn ilogb(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldexp(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lgamma(_X: f64) -> f64;
}
extern "C" {
    pub fn llrint(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1p(_X: f64) -> f64;
}
extern "C" {
    pub fn log2(_X: f64) -> f64;
}
extern "C" {
    pub fn logb(_X: f64) -> f64;
}
extern "C" {
    pub fn lrint(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _matherr(_Except: *mut _exception) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modf(_X: f64, _Y: *mut f64) -> f64;
}
extern "C" {
    pub fn nan(_X: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nearbyint(_X: f64) -> f64;
}
extern "C" {
    pub fn nextafter(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remainder(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remquo(_X: f64, _Y: f64, _Z: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(_X: f64) -> f64;
}
extern "C" {
    pub fn round(_X: f64) -> f64;
}
extern "C" {
    pub fn scalbln(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalbn(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn tgamma(_X: f64) -> f64;
}
extern "C" {
    pub fn trunc(_X: f64) -> f64;
}
extern "C" {
    pub fn _j0(_X: f64) -> f64;
}
extern "C" {
    pub fn _j1(_X: f64) -> f64;
}
extern "C" {
    pub fn _jn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn _y0(_X: f64) -> f64;
}
extern "C" {
    pub fn _y1(_X: f64) -> f64;
}
extern "C" {
    pub fn _yn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn acoshf(_X: f32) -> f32;
}
extern "C" {
    pub fn asinhf(_X: f32) -> f32;
}
extern "C" {
    pub fn atanhf(_X: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(_X: f32) -> f32;
}
extern "C" {
    pub fn _chgsignf(_X: f32) -> f32;
}
extern "C" {
    pub fn copysignf(_Number: f32, _Sign: f32) -> f32;
}
extern "C" {
    pub fn _copysignf(_Number: f32, _Sign: f32) -> f32;
}
extern "C" {
    pub fn erff(_X: f32) -> f32;
}
extern "C" {
    pub fn erfcf(_X: f32) -> f32;
}
extern "C" {
    pub fn expm1f(_X: f32) -> f32;
}
extern "C" {
    pub fn exp2f(_X: f32) -> f32;
}
extern "C" {
    pub fn fdimf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(_X: f32, _Y: f32, _Z: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn fminf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn _hypotf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn ilogbf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lgammaf(_X: f32) -> f32;
}
extern "C" {
    pub fn llrintf(_X: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(_X: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1pf(_X: f32) -> f32;
}
extern "C" {
    pub fn log2f(_X: f32) -> f32;
}
extern "C" {
    pub fn logbf(_X: f32) -> f32;
}
extern "C" {
    pub fn lrintf(_X: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundf(_X: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nanf(_X: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nearbyintf(_X: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(_X: f32, _Y: f64) -> f32;
}
extern "C" {
    pub fn remainderf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn remquof(_X: f32, _Y: f32, _Z: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(_X: f32) -> f32;
}
extern "C" {
    pub fn roundf(_X: f32) -> f32;
}
extern "C" {
    pub fn scalblnf(_X: f32, _Y: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbnf(_X: f32, _Y: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn tgammaf(_X: f32) -> f32;
}
extern "C" {
    pub fn truncf(_X: f32) -> f32;
}
extern "C" {
    pub fn _logbf(_X: f32) -> f32;
}
extern "C" {
    pub fn _nextafterf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn _finitef(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isnanf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fpclassf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_FMA3_enable(_Flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_FMA3_enable() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(_X: f32) -> f32;
}
extern "C" {
    pub fn asinf(_X: f32) -> f32;
}
extern "C" {
    pub fn atan2f(_Y: f32, _X: f32) -> f32;
}
extern "C" {
    pub fn atanf(_X: f32) -> f32;
}
extern "C" {
    pub fn ceilf(_X: f32) -> f32;
}
extern "C" {
    pub fn cosf(_X: f32) -> f32;
}
extern "C" {
    pub fn coshf(_X: f32) -> f32;
}
extern "C" {
    pub fn expf(_X: f32) -> f32;
}
extern "C" {
    pub fn floorf(_X: f32) -> f32;
}
extern "C" {
    pub fn fmodf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn log10f(_X: f32) -> f32;
}
extern "C" {
    pub fn logf(_X: f32) -> f32;
}
extern "C" {
    pub fn modff(_X: f32, _Y: *mut f32) -> f32;
}
extern "C" {
    pub fn powf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn sinf(_X: f32) -> f32;
}
extern "C" {
    pub fn sinhf(_X: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(_X: f32) -> f32;
}
extern "C" {
    pub fn tanf(_X: f32) -> f32;
}
extern "C" {
    pub fn tanhf(_X: f32) -> f32;
}
extern "C" {
    pub fn acoshl(_X: f64) -> f64;
}
extern "C" {
    pub fn asinhl(_X: f64) -> f64;
}
extern "C" {
    pub fn atanhl(_X: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(_X: f64) -> f64;
}
extern "C" {
    pub fn copysignl(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn erfl(_X: f64) -> f64;
}
extern "C" {
    pub fn erfcl(_X: f64) -> f64;
}
extern "C" {
    pub fn exp2l(_X: f64) -> f64;
}
extern "C" {
    pub fn expm1l(_X: f64) -> f64;
}
extern "C" {
    pub fn fdiml(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fmal(_X: f64, _Y: f64, _Z: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fminl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn ilogbl(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lgammal(_X: f64) -> f64;
}
extern "C" {
    pub fn llrintl(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1pl(_X: f64) -> f64;
}
extern "C" {
    pub fn log2l(_X: f64) -> f64;
}
extern "C" {
    pub fn logbl(_X: f64) -> f64;
}
extern "C" {
    pub fn lrintl(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nanl(_X: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nearbyintl(_X: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remainderl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remquol(_X: f64, _Y: f64, _Z: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rintl(_X: f64) -> f64;
}
extern "C" {
    pub fn roundl(_X: f64) -> f64;
}
extern "C" {
    pub fn scalblnl(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalbnl(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn tgammal(_X: f64) -> f64;
}
extern "C" {
    pub fn truncl(_X: f64) -> f64;
}
extern "C" {
    pub static mut HUGE: f64;
}
extern "C" {
    pub fn j0(_X: f64) -> f64;
}
extern "C" {
    pub fn j1(_X: f64) -> f64;
}
extern "C" {
    pub fn jn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn y0(_X: f64) -> f64;
}
extern "C" {
    pub fn y1(_X: f64) -> f64;
}
extern "C" {
    pub fn yn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pxtnPOINT {
    pub x: i32,
    pub y: i32,
}
#[test]
fn bindgen_test_layout_pxtnPOINT() {
    assert_eq!(
        ::std::mem::size_of::<pxtnPOINT>(),
        8usize,
        concat!("Size of: ", stringify!(pxtnPOINT))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnPOINT>(),
        4usize,
        concat!("Alignment of ", stringify!(pxtnPOINT))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPOINT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPOINT),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPOINT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPOINT),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
}
pub const pxtnERR_pxtnOK: pxtnERR = 0;
pub const pxtnERR_pxtnERR_VOID: pxtnERR = 1;
pub const pxtnERR_pxtnERR_INIT: pxtnERR = 2;
pub const pxtnERR_pxtnERR_FATAL: pxtnERR = 3;
pub const pxtnERR_pxtnERR_anti_opreation: pxtnERR = 4;
pub const pxtnERR_pxtnERR_deny_beatclock: pxtnERR = 5;
pub const pxtnERR_pxtnERR_desc_w: pxtnERR = 6;
pub const pxtnERR_pxtnERR_desc_r: pxtnERR = 7;
pub const pxtnERR_pxtnERR_desc_broken: pxtnERR = 8;
pub const pxtnERR_pxtnERR_fmt_new: pxtnERR = 9;
pub const pxtnERR_pxtnERR_fmt_unknown: pxtnERR = 10;
pub const pxtnERR_pxtnERR_inv_code: pxtnERR = 11;
pub const pxtnERR_pxtnERR_inv_data: pxtnERR = 12;
pub const pxtnERR_pxtnERR_memory: pxtnERR = 13;
pub const pxtnERR_pxtnERR_moo_init: pxtnERR = 14;
pub const pxtnERR_pxtnERR_ogg: pxtnERR = 15;
pub const pxtnERR_pxtnERR_ogg_no_supported: pxtnERR = 16;
pub const pxtnERR_pxtnERR_param: pxtnERR = 17;
pub const pxtnERR_pxtnERR_pcm_convert: pxtnERR = 18;
pub const pxtnERR_pxtnERR_pcm_unknown: pxtnERR = 19;
pub const pxtnERR_pxtnERR_ptn_build: pxtnERR = 20;
pub const pxtnERR_pxtnERR_ptn_init: pxtnERR = 21;
pub const pxtnERR_pxtnERR_ptv_no_supported: pxtnERR = 22;
pub const pxtnERR_pxtnERR_too_much_event: pxtnERR = 23;
pub const pxtnERR_pxtnERR_woice_full: pxtnERR = 24;
pub const pxtnERR_pxtnERR_x1x_ignore: pxtnERR = 25;
pub const pxtnERR_pxtnERR_x3x_add_tuning: pxtnERR = 26;
pub const pxtnERR_pxtnERR_x3x_key: pxtnERR = 27;
pub const pxtnERR_pxtnERR_num: pxtnERR = 28;
pub type pxtnERR = ::std::os::raw::c_int;
extern "C" {
    #[link_name = "\u{1}?pxtnError_get_string@@YAPEBDW4pxtnERR@@@Z"]
    pub fn pxtnError_get_string(err_code: pxtnERR) -> *const ::std::os::raw::c_char;
}
pub const pxtnSEEK_pxtnSEEK_set: pxtnSEEK = 0;
pub const pxtnSEEK_pxtnSEEK_cur: pxtnSEEK = 1;
pub const pxtnSEEK_pxtnSEEK_end: pxtnSEEK = 2;
pub const pxtnSEEK_pxtnSEEK_num: pxtnSEEK = 3;
pub type pxtnSEEK = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pxtnDescriptor {
    pub _p_desc: *mut ::std::os::raw::c_void,
    pub _b_file: bool,
    pub _b_read: bool,
    pub _size: i32,
    pub _cur: i32,
}
pub const pxtnDescriptor__BUFSIZE_HEEP: pxtnDescriptor__bindgen_ty_1 = 1024;
pub const pxtnDescriptor__TAGLINE_NUM: pxtnDescriptor__bindgen_ty_1 = 128;
pub type pxtnDescriptor__bindgen_ty_1 = ::std::os::raw::c_int;
#[test]
fn bindgen_test_layout_pxtnDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<pxtnDescriptor>(),
        24usize,
        concat!("Size of: ", stringify!(pxtnDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnDescriptor))
    );
    fn test_field__p_desc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnDescriptor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._p_desc) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnDescriptor),
                "::",
                stringify!(_p_desc)
            )
        );
    }
    test_field__p_desc();
    fn test_field__b_file() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnDescriptor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._b_file) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnDescriptor),
                "::",
                stringify!(_b_file)
            )
        );
    }
    test_field__b_file();
    fn test_field__b_read() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnDescriptor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._b_read) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnDescriptor),
                "::",
                stringify!(_b_read)
            )
        );
    }
    test_field__b_read();
    fn test_field__size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnDescriptor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnDescriptor),
                "::",
                stringify!(_size)
            )
        );
    }
    test_field__size();
    fn test_field__cur() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnDescriptor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._cur) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnDescriptor),
                "::",
                stringify!(_cur)
            )
        );
    }
    test_field__cur();
}
extern "C" {
    #[link_name = "\u{1}?set_file_r@pxtnDescriptor@@QEAA_NPEAU_iobuf@@@Z"]
    pub fn pxtnDescriptor_set_file_r(this: *mut pxtnDescriptor, fp: *mut FILE) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?set_file_w@pxtnDescriptor@@QEAA_NPEAU_iobuf@@@Z"]
    pub fn pxtnDescriptor_set_file_w(this: *mut pxtnDescriptor, fp: *mut FILE) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?set_memory_r@pxtnDescriptor@@QEAA_NPEAXH@Z"]
    pub fn pxtnDescriptor_set_memory_r(
        this: *mut pxtnDescriptor,
        p_mem: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?seek@pxtnDescriptor@@QEAA_NW4pxtnSEEK@@H@Z"]
    pub fn pxtnDescriptor_seek(
        this: *mut pxtnDescriptor,
        mode: pxtnSEEK,
        val: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?w_asfile@pxtnDescriptor@@QEAA_NPEBXHH@Z"]
    pub fn pxtnDescriptor_w_asfile(
        this: *mut pxtnDescriptor,
        p: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        num: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?r@pxtnDescriptor@@QEAA_NPEAXHH@Z"]
    pub fn pxtnDescriptor_r(
        this: *mut pxtnDescriptor,
        p: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        num: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?v_w_asfile@pxtnDescriptor@@QEAAHHPEAH@Z"]
    pub fn pxtnDescriptor_v_w_asfile(
        this: *mut pxtnDescriptor,
        val: i32,
        p_add: *mut i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?v_r@pxtnDescriptor@@QEAA_NPEAH@Z"]
    pub fn pxtnDescriptor_v_r(this: *mut pxtnDescriptor, p: *mut i32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?get_size_bytes@pxtnDescriptor@@QEBAHXZ"]
    pub fn pxtnDescriptor_get_size_bytes(this: *const pxtnDescriptor) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}??0pxtnDescriptor@@QEAA@XZ"]
    pub fn pxtnDescriptor_pxtnDescriptor(this: *mut pxtnDescriptor);
}
impl pxtnDescriptor {
    #[inline]
    pub unsafe fn set_file_r(&mut self, fp: *mut FILE) -> bool {
        pxtnDescriptor_set_file_r(self, fp)
    }
    #[inline]
    pub unsafe fn set_file_w(&mut self, fp: *mut FILE) -> bool {
        pxtnDescriptor_set_file_w(self, fp)
    }
    #[inline]
    pub unsafe fn set_memory_r(
        &mut self,
        p_mem: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> bool {
        pxtnDescriptor_set_memory_r(self, p_mem, len)
    }
    #[inline]
    pub unsafe fn seek(&mut self, mode: pxtnSEEK, val: ::std::os::raw::c_int) -> bool {
        pxtnDescriptor_seek(self, mode, val)
    }
    #[inline]
    pub unsafe fn w_asfile(
        &mut self,
        p: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        num: ::std::os::raw::c_int,
    ) -> bool {
        pxtnDescriptor_w_asfile(self, p, size, num)
    }
    #[inline]
    pub unsafe fn r(
        &mut self,
        p: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        num: ::std::os::raw::c_int,
    ) -> bool {
        pxtnDescriptor_r(self, p, size, num)
    }
    #[inline]
    pub unsafe fn v_w_asfile(&mut self, val: i32, p_add: *mut i32) -> ::std::os::raw::c_int {
        pxtnDescriptor_v_w_asfile(self, val, p_add)
    }
    #[inline]
    pub unsafe fn v_r(&mut self, p: *mut i32) -> bool {
        pxtnDescriptor_v_r(self, p)
    }
    #[inline]
    pub unsafe fn get_size_bytes(&self) -> ::std::os::raw::c_int {
        pxtnDescriptor_get_size_bytes(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        pxtnDescriptor_pxtnDescriptor(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}?pxtnDescriptor_v_chk@@YAHH@Z"]
    pub fn pxtnDescriptor_v_chk(val: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct pxtnPulse_Frequency {
    pub _freq_table: *mut f32,
}
#[test]
fn bindgen_test_layout_pxtnPulse_Frequency() {
    assert_eq!(
        ::std::mem::size_of::<pxtnPulse_Frequency>(),
        8usize,
        concat!("Size of: ", stringify!(pxtnPulse_Frequency))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnPulse_Frequency>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnPulse_Frequency))
    );
    fn test_field__freq_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_Frequency>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._freq_table) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_Frequency),
                "::",
                stringify!(_freq_table)
            )
        );
    }
    test_field__freq_table();
}
extern "C" {
    #[link_name = "\u{1}?Init@pxtnPulse_Frequency@@QEAA_NXZ"]
    pub fn pxtnPulse_Frequency_Init(this: *mut pxtnPulse_Frequency) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Get@pxtnPulse_Frequency@@QEAAMH@Z"]
    pub fn pxtnPulse_Frequency_Get(this: *mut pxtnPulse_Frequency, key: i32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?Get2@pxtnPulse_Frequency@@QEAAMH@Z"]
    pub fn pxtnPulse_Frequency_Get2(this: *mut pxtnPulse_Frequency, key: i32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetDirect@pxtnPulse_Frequency@@QEAAPEBMPEAH@Z"]
    pub fn pxtnPulse_Frequency_GetDirect(
        this: *mut pxtnPulse_Frequency,
        p_size: *mut i32,
    ) -> *const f32;
}
extern "C" {
    #[link_name = "\u{1}??0pxtnPulse_Frequency@@QEAA@XZ"]
    pub fn pxtnPulse_Frequency_pxtnPulse_Frequency(this: *mut pxtnPulse_Frequency);
}
extern "C" {
    #[link_name = "\u{1}??_DpxtnPulse_Frequency@@QEAAXXZ"]
    pub fn pxtnPulse_Frequency_pxtnPulse_Frequency_destructor(this: *mut pxtnPulse_Frequency);
}
impl pxtnPulse_Frequency {
    #[inline]
    pub unsafe fn Init(&mut self) -> bool {
        pxtnPulse_Frequency_Init(self)
    }
    #[inline]
    pub unsafe fn Get(&mut self, key: i32) -> f32 {
        pxtnPulse_Frequency_Get(self, key)
    }
    #[inline]
    pub unsafe fn Get2(&mut self, key: i32) -> f32 {
        pxtnPulse_Frequency_Get2(self, key)
    }
    #[inline]
    pub unsafe fn GetDirect(&mut self, p_size: *mut i32) -> *const f32 {
        pxtnPulse_Frequency_GetDirect(self, p_size)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        pxtnPulse_Frequency_pxtnPulse_Frequency(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        pxtnPulse_Frequency_pxtnPulse_Frequency_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pxtnPulse_Oscillator {
    pub _p_point: *mut pxtnPOINT,
    pub _point_num: i32,
    pub _point_reso: i32,
    pub _volume: i32,
    pub _sample_num: i32,
}
#[test]
fn bindgen_test_layout_pxtnPulse_Oscillator() {
    assert_eq!(
        ::std::mem::size_of::<pxtnPulse_Oscillator>(),
        24usize,
        concat!("Size of: ", stringify!(pxtnPulse_Oscillator))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnPulse_Oscillator>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnPulse_Oscillator))
    );
    fn test_field__p_point() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_Oscillator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._p_point) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_Oscillator),
                "::",
                stringify!(_p_point)
            )
        );
    }
    test_field__p_point();
    fn test_field__point_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_Oscillator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._point_num) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_Oscillator),
                "::",
                stringify!(_point_num)
            )
        );
    }
    test_field__point_num();
    fn test_field__point_reso() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_Oscillator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._point_reso) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_Oscillator),
                "::",
                stringify!(_point_reso)
            )
        );
    }
    test_field__point_reso();
    fn test_field__volume() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_Oscillator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._volume) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_Oscillator),
                "::",
                stringify!(_volume)
            )
        );
    }
    test_field__volume();
    fn test_field__sample_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_Oscillator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._sample_num) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_Oscillator),
                "::",
                stringify!(_sample_num)
            )
        );
    }
    test_field__sample_num();
}
extern "C" {
    #[link_name = "\u{1}?ReadyGetSample@pxtnPulse_Oscillator@@QEAAXPEAUpxtnPOINT@@HHHH@Z"]
    pub fn pxtnPulse_Oscillator_ReadyGetSample(
        this: *mut pxtnPulse_Oscillator,
        p_point: *mut pxtnPOINT,
        point_num: i32,
        volume: i32,
        sample_num: i32,
        point_reso: i32,
    );
}
extern "C" {
    #[link_name = "\u{1}?GetOneSample_Overtone@pxtnPulse_Oscillator@@QEAANH@Z"]
    pub fn pxtnPulse_Oscillator_GetOneSample_Overtone(
        this: *mut pxtnPulse_Oscillator,
        index: i32,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}?GetOneSample_Coodinate@pxtnPulse_Oscillator@@QEAANH@Z"]
    pub fn pxtnPulse_Oscillator_GetOneSample_Coodinate(
        this: *mut pxtnPulse_Oscillator,
        index: i32,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}??0pxtnPulse_Oscillator@@QEAA@XZ"]
    pub fn pxtnPulse_Oscillator_pxtnPulse_Oscillator(this: *mut pxtnPulse_Oscillator);
}
impl pxtnPulse_Oscillator {
    #[inline]
    pub unsafe fn ReadyGetSample(
        &mut self,
        p_point: *mut pxtnPOINT,
        point_num: i32,
        volume: i32,
        sample_num: i32,
        point_reso: i32,
    ) {
        pxtnPulse_Oscillator_ReadyGetSample(
            self, p_point, point_num, volume, sample_num, point_reso,
        )
    }
    #[inline]
    pub unsafe fn GetOneSample_Overtone(&mut self, index: i32) -> f64 {
        pxtnPulse_Oscillator_GetOneSample_Overtone(self, index)
    }
    #[inline]
    pub unsafe fn GetOneSample_Coodinate(&mut self, index: i32) -> f64 {
        pxtnPulse_Oscillator_GetOneSample_Coodinate(self, index)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        pxtnPulse_Oscillator_pxtnPulse_Oscillator(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct pxtnPulse_PCM {
    pub _ch: i32,
    pub _sps: i32,
    pub _bps: i32,
    pub _smp_head: i32,
    pub _smp_body: i32,
    pub _smp_tail: i32,
    pub _p_smp: *mut u8,
}
#[test]
fn bindgen_test_layout_pxtnPulse_PCM() {
    assert_eq!(
        ::std::mem::size_of::<pxtnPulse_PCM>(),
        32usize,
        concat!("Size of: ", stringify!(pxtnPulse_PCM))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnPulse_PCM>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnPulse_PCM))
    );
    fn test_field__ch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_PCM>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._ch) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_PCM),
                "::",
                stringify!(_ch)
            )
        );
    }
    test_field__ch();
    fn test_field__sps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_PCM>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._sps) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_PCM),
                "::",
                stringify!(_sps)
            )
        );
    }
    test_field__sps();
    fn test_field__bps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_PCM>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._bps) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_PCM),
                "::",
                stringify!(_bps)
            )
        );
    }
    test_field__bps();
    fn test_field__smp_head() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_PCM>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._smp_head) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_PCM),
                "::",
                stringify!(_smp_head)
            )
        );
    }
    test_field__smp_head();
    fn test_field__smp_body() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_PCM>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._smp_body) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_PCM),
                "::",
                stringify!(_smp_body)
            )
        );
    }
    test_field__smp_body();
    fn test_field__smp_tail() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_PCM>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._smp_tail) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_PCM),
                "::",
                stringify!(_smp_tail)
            )
        );
    }
    test_field__smp_tail();
    fn test_field__p_smp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_PCM>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._p_smp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_PCM),
                "::",
                stringify!(_p_smp)
            )
        );
    }
    test_field__p_smp();
}
extern "C" {
    #[link_name = "\u{1}?Create@pxtnPulse_PCM@@QEAA?AW4pxtnERR@@HHHH@Z"]
    pub fn pxtnPulse_PCM_Create(
        this: *mut pxtnPulse_PCM,
        ch: i32,
        sps: i32,
        bps: i32,
        sample_num: i32,
    ) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?Release@pxtnPulse_PCM@@QEAAXXZ"]
    pub fn pxtnPulse_PCM_Release(this: *mut pxtnPulse_PCM);
}
extern "C" {
    #[link_name = "\u{1}?read@pxtnPulse_PCM@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@@Z"]
    pub fn pxtnPulse_PCM_read(this: *mut pxtnPulse_PCM, doc: *mut pxtnDescriptor) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?write@pxtnPulse_PCM@@QEBA_NPEAVpxtnDescriptor@@PEBD@Z"]
    pub fn pxtnPulse_PCM_write(
        this: *const pxtnPulse_PCM,
        doc: *mut pxtnDescriptor,
        pstrLIST: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Convert@pxtnPulse_PCM@@QEAA_NHHH@Z"]
    pub fn pxtnPulse_PCM_Convert(
        this: *mut pxtnPulse_PCM,
        new_ch: i32,
        new_sps: i32,
        new_bps: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Convert_Volume@pxtnPulse_PCM@@QEAA_NM@Z"]
    pub fn pxtnPulse_PCM_Convert_Volume(this: *mut pxtnPulse_PCM, v: f32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Copy@pxtnPulse_PCM@@QEBA?AW4pxtnERR@@PEAV1@@Z"]
    pub fn pxtnPulse_PCM_Copy(this: *const pxtnPulse_PCM, p_dst: *mut pxtnPulse_PCM) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?Copy_@pxtnPulse_PCM@@QEBA_NPEAV1@HH@Z"]
    pub fn pxtnPulse_PCM_Copy_(
        this: *const pxtnPulse_PCM,
        p_dst: *mut pxtnPulse_PCM,
        start: i32,
        end: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Devolve_SamplingBuffer@pxtnPulse_PCM@@QEAAPEAXXZ"]
    pub fn pxtnPulse_PCM_Devolve_SamplingBuffer(
        this: *mut pxtnPulse_PCM,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}?get_sec@pxtnPulse_PCM@@QEBAMXZ"]
    pub fn pxtnPulse_PCM_get_sec(this: *const pxtnPulse_PCM) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?get_ch@pxtnPulse_PCM@@QEBAHXZ"]
    pub fn pxtnPulse_PCM_get_ch(this: *const pxtnPulse_PCM) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_bps@pxtnPulse_PCM@@QEBAHXZ"]
    pub fn pxtnPulse_PCM_get_bps(this: *const pxtnPulse_PCM) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_sps@pxtnPulse_PCM@@QEBAHXZ"]
    pub fn pxtnPulse_PCM_get_sps(this: *const pxtnPulse_PCM) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_smp_body@pxtnPulse_PCM@@QEBAHXZ"]
    pub fn pxtnPulse_PCM_get_smp_body(this: *const pxtnPulse_PCM) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_smp_head@pxtnPulse_PCM@@QEBAHXZ"]
    pub fn pxtnPulse_PCM_get_smp_head(this: *const pxtnPulse_PCM) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_smp_tail@pxtnPulse_PCM@@QEBAHXZ"]
    pub fn pxtnPulse_PCM_get_smp_tail(this: *const pxtnPulse_PCM) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_buf_size@pxtnPulse_PCM@@QEBAHXZ"]
    pub fn pxtnPulse_PCM_get_buf_size(this: *const pxtnPulse_PCM) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_p_buf@pxtnPulse_PCM@@QEBAPEBXXZ"]
    pub fn pxtnPulse_PCM_get_p_buf(this: *const pxtnPulse_PCM) -> *const ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}?get_p_buf_variable@pxtnPulse_PCM@@QEBAPEAXXZ"]
    pub fn pxtnPulse_PCM_get_p_buf_variable(
        this: *const pxtnPulse_PCM,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}??0pxtnPulse_PCM@@QEAA@XZ"]
    pub fn pxtnPulse_PCM_pxtnPulse_PCM(this: *mut pxtnPulse_PCM);
}
extern "C" {
    #[link_name = "\u{1}??_DpxtnPulse_PCM@@QEAAXXZ"]
    pub fn pxtnPulse_PCM_pxtnPulse_PCM_destructor(this: *mut pxtnPulse_PCM);
}
impl pxtnPulse_PCM {
    #[inline]
    pub unsafe fn Create(&mut self, ch: i32, sps: i32, bps: i32, sample_num: i32) -> pxtnERR {
        pxtnPulse_PCM_Create(self, ch, sps, bps, sample_num)
    }
    #[inline]
    pub unsafe fn Release(&mut self) {
        pxtnPulse_PCM_Release(self)
    }
    #[inline]
    pub unsafe fn read(&mut self, doc: *mut pxtnDescriptor) -> pxtnERR {
        pxtnPulse_PCM_read(self, doc)
    }
    #[inline]
    pub unsafe fn write(
        &self,
        doc: *mut pxtnDescriptor,
        pstrLIST: *const ::std::os::raw::c_char,
    ) -> bool {
        pxtnPulse_PCM_write(self, doc, pstrLIST)
    }
    #[inline]
    pub unsafe fn Convert(&mut self, new_ch: i32, new_sps: i32, new_bps: i32) -> bool {
        pxtnPulse_PCM_Convert(self, new_ch, new_sps, new_bps)
    }
    #[inline]
    pub unsafe fn Convert_Volume(&mut self, v: f32) -> bool {
        pxtnPulse_PCM_Convert_Volume(self, v)
    }
    #[inline]
    pub unsafe fn Copy(&self, p_dst: *mut pxtnPulse_PCM) -> pxtnERR {
        pxtnPulse_PCM_Copy(self, p_dst)
    }
    #[inline]
    pub unsafe fn Copy_(&self, p_dst: *mut pxtnPulse_PCM, start: i32, end: i32) -> bool {
        pxtnPulse_PCM_Copy_(self, p_dst, start, end)
    }
    #[inline]
    pub unsafe fn Devolve_SamplingBuffer(&mut self) -> *mut ::std::os::raw::c_void {
        pxtnPulse_PCM_Devolve_SamplingBuffer(self)
    }
    #[inline]
    pub unsafe fn get_sec(&self) -> f32 {
        pxtnPulse_PCM_get_sec(self)
    }
    #[inline]
    pub unsafe fn get_ch(&self) -> i32 {
        pxtnPulse_PCM_get_ch(self)
    }
    #[inline]
    pub unsafe fn get_bps(&self) -> i32 {
        pxtnPulse_PCM_get_bps(self)
    }
    #[inline]
    pub unsafe fn get_sps(&self) -> i32 {
        pxtnPulse_PCM_get_sps(self)
    }
    #[inline]
    pub unsafe fn get_smp_body(&self) -> i32 {
        pxtnPulse_PCM_get_smp_body(self)
    }
    #[inline]
    pub unsafe fn get_smp_head(&self) -> i32 {
        pxtnPulse_PCM_get_smp_head(self)
    }
    #[inline]
    pub unsafe fn get_smp_tail(&self) -> i32 {
        pxtnPulse_PCM_get_smp_tail(self)
    }
    #[inline]
    pub unsafe fn get_buf_size(&self) -> i32 {
        pxtnPulse_PCM_get_buf_size(self)
    }
    #[inline]
    pub unsafe fn get_p_buf(&self) -> *const ::std::os::raw::c_void {
        pxtnPulse_PCM_get_p_buf(self)
    }
    #[inline]
    pub unsafe fn get_p_buf_variable(&self) -> *mut ::std::os::raw::c_void {
        pxtnPulse_PCM_get_p_buf_variable(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        pxtnPulse_PCM_pxtnPulse_PCM(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        pxtnPulse_PCM_pxtnPulse_PCM_destructor(self)
    }
}
pub const pxWAVETYPE_pxWAVETYPE_None: pxWAVETYPE = 0;
pub const pxWAVETYPE_pxWAVETYPE_Sine: pxWAVETYPE = 1;
pub const pxWAVETYPE_pxWAVETYPE_Saw: pxWAVETYPE = 2;
pub const pxWAVETYPE_pxWAVETYPE_Rect: pxWAVETYPE = 3;
pub const pxWAVETYPE_pxWAVETYPE_Random: pxWAVETYPE = 4;
pub const pxWAVETYPE_pxWAVETYPE_Saw2: pxWAVETYPE = 5;
pub const pxWAVETYPE_pxWAVETYPE_Rect2: pxWAVETYPE = 6;
pub const pxWAVETYPE_pxWAVETYPE_Tri: pxWAVETYPE = 7;
pub const pxWAVETYPE_pxWAVETYPE_Random2: pxWAVETYPE = 8;
pub const pxWAVETYPE_pxWAVETYPE_Rect3: pxWAVETYPE = 9;
pub const pxWAVETYPE_pxWAVETYPE_Rect4: pxWAVETYPE = 10;
pub const pxWAVETYPE_pxWAVETYPE_Rect8: pxWAVETYPE = 11;
pub const pxWAVETYPE_pxWAVETYPE_Rect16: pxWAVETYPE = 12;
pub const pxWAVETYPE_pxWAVETYPE_Saw3: pxWAVETYPE = 13;
pub const pxWAVETYPE_pxWAVETYPE_Saw4: pxWAVETYPE = 14;
pub const pxWAVETYPE_pxWAVETYPE_Saw6: pxWAVETYPE = 15;
pub const pxWAVETYPE_pxWAVETYPE_Saw8: pxWAVETYPE = 16;
pub const pxWAVETYPE_pxWAVETYPE_num: pxWAVETYPE = 17;
pub type pxWAVETYPE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pxNOISEDESIGN_OSCILLATOR {
    pub type_: pxWAVETYPE,
    pub freq: f32,
    pub volume: f32,
    pub offset: f32,
    pub b_rev: bool,
}
#[test]
fn bindgen_test_layout_pxNOISEDESIGN_OSCILLATOR() {
    assert_eq!(
        ::std::mem::size_of::<pxNOISEDESIGN_OSCILLATOR>(),
        20usize,
        concat!("Size of: ", stringify!(pxNOISEDESIGN_OSCILLATOR))
    );
    assert_eq!(
        ::std::mem::align_of::<pxNOISEDESIGN_OSCILLATOR>(),
        4usize,
        concat!("Alignment of ", stringify!(pxNOISEDESIGN_OSCILLATOR))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxNOISEDESIGN_OSCILLATOR>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxNOISEDESIGN_OSCILLATOR),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxNOISEDESIGN_OSCILLATOR>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pxNOISEDESIGN_OSCILLATOR),
                "::",
                stringify!(freq)
            )
        );
    }
    test_field_freq();
    fn test_field_volume() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxNOISEDESIGN_OSCILLATOR>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).volume) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxNOISEDESIGN_OSCILLATOR),
                "::",
                stringify!(volume)
            )
        );
    }
    test_field_volume();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxNOISEDESIGN_OSCILLATOR>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pxNOISEDESIGN_OSCILLATOR),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_b_rev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxNOISEDESIGN_OSCILLATOR>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).b_rev) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxNOISEDESIGN_OSCILLATOR),
                "::",
                stringify!(b_rev)
            )
        );
    }
    test_field_b_rev();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pxNOISEDESIGN_UNIT {
    pub bEnable: bool,
    pub enve_num: i32,
    pub enves: *mut pxtnPOINT,
    pub pan: i32,
    pub main: pxNOISEDESIGN_OSCILLATOR,
    pub freq: pxNOISEDESIGN_OSCILLATOR,
    pub volu: pxNOISEDESIGN_OSCILLATOR,
}
#[test]
fn bindgen_test_layout_pxNOISEDESIGN_UNIT() {
    assert_eq!(
        ::std::mem::size_of::<pxNOISEDESIGN_UNIT>(),
        80usize,
        concat!("Size of: ", stringify!(pxNOISEDESIGN_UNIT))
    );
    assert_eq!(
        ::std::mem::align_of::<pxNOISEDESIGN_UNIT>(),
        8usize,
        concat!("Alignment of ", stringify!(pxNOISEDESIGN_UNIT))
    );
    fn test_field_bEnable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxNOISEDESIGN_UNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bEnable) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxNOISEDESIGN_UNIT),
                "::",
                stringify!(bEnable)
            )
        );
    }
    test_field_bEnable();
    fn test_field_enve_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxNOISEDESIGN_UNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enve_num) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pxNOISEDESIGN_UNIT),
                "::",
                stringify!(enve_num)
            )
        );
    }
    test_field_enve_num();
    fn test_field_enves() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxNOISEDESIGN_UNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enves) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxNOISEDESIGN_UNIT),
                "::",
                stringify!(enves)
            )
        );
    }
    test_field_enves();
    fn test_field_pan() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxNOISEDESIGN_UNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pan) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxNOISEDESIGN_UNIT),
                "::",
                stringify!(pan)
            )
        );
    }
    test_field_pan();
    fn test_field_main() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxNOISEDESIGN_UNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).main) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(pxNOISEDESIGN_UNIT),
                "::",
                stringify!(main)
            )
        );
    }
    test_field_main();
    fn test_field_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxNOISEDESIGN_UNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(pxNOISEDESIGN_UNIT),
                "::",
                stringify!(freq)
            )
        );
    }
    test_field_freq();
    fn test_field_volu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxNOISEDESIGN_UNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).volu) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(pxNOISEDESIGN_UNIT),
                "::",
                stringify!(volu)
            )
        );
    }
    test_field_volu();
}
#[repr(C)]
#[derive(Debug)]
pub struct pxtnPulse_Noise {
    pub _smp_num_44k: i32,
    pub _unit_num: i32,
    pub _units: *mut pxNOISEDESIGN_UNIT,
}
#[test]
fn bindgen_test_layout_pxtnPulse_Noise() {
    assert_eq!(
        ::std::mem::size_of::<pxtnPulse_Noise>(),
        16usize,
        concat!("Size of: ", stringify!(pxtnPulse_Noise))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnPulse_Noise>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnPulse_Noise))
    );
    fn test_field__smp_num_44k() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_Noise>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._smp_num_44k) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_Noise),
                "::",
                stringify!(_smp_num_44k)
            )
        );
    }
    test_field__smp_num_44k();
    fn test_field__unit_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_Noise>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._unit_num) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_Noise),
                "::",
                stringify!(_unit_num)
            )
        );
    }
    test_field__unit_num();
    fn test_field__units() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_Noise>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._units) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_Noise),
                "::",
                stringify!(_units)
            )
        );
    }
    test_field__units();
}
extern "C" {
    #[link_name = "\u{1}?write@pxtnPulse_Noise@@QEBA_NPEAVpxtnDescriptor@@PEAH@Z"]
    pub fn pxtnPulse_Noise_write(
        this: *const pxtnPulse_Noise,
        p_doc: *mut pxtnDescriptor,
        p_add: *mut i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?read@pxtnPulse_Noise@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@@Z"]
    pub fn pxtnPulse_Noise_read(this: *mut pxtnPulse_Noise, p_doc: *mut pxtnDescriptor) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?Release@pxtnPulse_Noise@@QEAAXXZ"]
    pub fn pxtnPulse_Noise_Release(this: *mut pxtnPulse_Noise);
}
extern "C" {
    #[link_name = "\u{1}?Allocate@pxtnPulse_Noise@@QEAA_NHH@Z"]
    pub fn pxtnPulse_Noise_Allocate(
        this: *mut pxtnPulse_Noise,
        unit_num: i32,
        envelope_num: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Copy@pxtnPulse_Noise@@QEBA_NPEAV1@@Z"]
    pub fn pxtnPulse_Noise_Copy(this: *const pxtnPulse_Noise, p_dst: *mut pxtnPulse_Noise) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Compare@pxtnPulse_Noise@@QEBAHPEBV1@@Z"]
    pub fn pxtnPulse_Noise_Compare(
        this: *const pxtnPulse_Noise,
        p_src: *const pxtnPulse_Noise,
    ) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Fix@pxtnPulse_Noise@@QEAAXXZ"]
    pub fn pxtnPulse_Noise_Fix(this: *mut pxtnPulse_Noise);
}
extern "C" {
    #[link_name = "\u{1}?set_smp_num_44k@pxtnPulse_Noise@@QEAAXH@Z"]
    pub fn pxtnPulse_Noise_set_smp_num_44k(this: *mut pxtnPulse_Noise, num: i32);
}
extern "C" {
    #[link_name = "\u{1}?get_unit_num@pxtnPulse_Noise@@QEBAHXZ"]
    pub fn pxtnPulse_Noise_get_unit_num(this: *const pxtnPulse_Noise) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_smp_num_44k@pxtnPulse_Noise@@QEBAHXZ"]
    pub fn pxtnPulse_Noise_get_smp_num_44k(this: *const pxtnPulse_Noise) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_sec@pxtnPulse_Noise@@QEBAMXZ"]
    pub fn pxtnPulse_Noise_get_sec(this: *const pxtnPulse_Noise) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?get_unit@pxtnPulse_Noise@@QEAAPEAUpxNOISEDESIGN_UNIT@@H@Z"]
    pub fn pxtnPulse_Noise_get_unit(this: *mut pxtnPulse_Noise, u: i32) -> *mut pxNOISEDESIGN_UNIT;
}
extern "C" {
    #[link_name = "\u{1}??0pxtnPulse_Noise@@QEAA@XZ"]
    pub fn pxtnPulse_Noise_pxtnPulse_Noise(this: *mut pxtnPulse_Noise);
}
extern "C" {
    #[link_name = "\u{1}??_DpxtnPulse_Noise@@QEAAXXZ"]
    pub fn pxtnPulse_Noise_pxtnPulse_Noise_destructor(this: *mut pxtnPulse_Noise);
}
impl pxtnPulse_Noise {
    #[inline]
    pub unsafe fn write(&self, p_doc: *mut pxtnDescriptor, p_add: *mut i32) -> bool {
        pxtnPulse_Noise_write(self, p_doc, p_add)
    }
    #[inline]
    pub unsafe fn read(&mut self, p_doc: *mut pxtnDescriptor) -> pxtnERR {
        pxtnPulse_Noise_read(self, p_doc)
    }
    #[inline]
    pub unsafe fn Release(&mut self) {
        pxtnPulse_Noise_Release(self)
    }
    #[inline]
    pub unsafe fn Allocate(&mut self, unit_num: i32, envelope_num: i32) -> bool {
        pxtnPulse_Noise_Allocate(self, unit_num, envelope_num)
    }
    #[inline]
    pub unsafe fn Copy(&self, p_dst: *mut pxtnPulse_Noise) -> bool {
        pxtnPulse_Noise_Copy(self, p_dst)
    }
    #[inline]
    pub unsafe fn Compare(&self, p_src: *const pxtnPulse_Noise) -> i32 {
        pxtnPulse_Noise_Compare(self, p_src)
    }
    #[inline]
    pub unsafe fn Fix(&mut self) {
        pxtnPulse_Noise_Fix(self)
    }
    #[inline]
    pub unsafe fn set_smp_num_44k(&mut self, num: i32) {
        pxtnPulse_Noise_set_smp_num_44k(self, num)
    }
    #[inline]
    pub unsafe fn get_unit_num(&self) -> i32 {
        pxtnPulse_Noise_get_unit_num(self)
    }
    #[inline]
    pub unsafe fn get_smp_num_44k(&self) -> i32 {
        pxtnPulse_Noise_get_smp_num_44k(self)
    }
    #[inline]
    pub unsafe fn get_sec(&self) -> f32 {
        pxtnPulse_Noise_get_sec(self)
    }
    #[inline]
    pub unsafe fn get_unit(&mut self, u: i32) -> *mut pxNOISEDESIGN_UNIT {
        pxtnPulse_Noise_get_unit(self, u)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        pxtnPulse_Noise_pxtnPulse_Noise(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        pxtnPulse_Noise_pxtnPulse_Noise_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct pxtnPulse_NoiseBuilder {
    pub _b_init: bool,
    pub _p_tables: [*mut ::std::os::raw::c_short; 17usize],
    pub _rand_buf: [i32; 2usize],
    pub _freq: *mut pxtnPulse_Frequency,
}
#[test]
fn bindgen_test_layout_pxtnPulse_NoiseBuilder() {
    assert_eq!(
        ::std::mem::size_of::<pxtnPulse_NoiseBuilder>(),
        160usize,
        concat!("Size of: ", stringify!(pxtnPulse_NoiseBuilder))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnPulse_NoiseBuilder>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnPulse_NoiseBuilder))
    );
    fn test_field__b_init() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_NoiseBuilder>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._b_init) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_NoiseBuilder),
                "::",
                stringify!(_b_init)
            )
        );
    }
    test_field__b_init();
    fn test_field__p_tables() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_NoiseBuilder>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._p_tables) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_NoiseBuilder),
                "::",
                stringify!(_p_tables)
            )
        );
    }
    test_field__p_tables();
    fn test_field__rand_buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_NoiseBuilder>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._rand_buf) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_NoiseBuilder),
                "::",
                stringify!(_rand_buf)
            )
        );
    }
    test_field__rand_buf();
    fn test_field__freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_NoiseBuilder>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._freq) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_NoiseBuilder),
                "::",
                stringify!(_freq)
            )
        );
    }
    test_field__freq();
}
extern "C" {
    #[link_name = "\u{1}?Init@pxtnPulse_NoiseBuilder@@QEAA_NXZ"]
    pub fn pxtnPulse_NoiseBuilder_Init(this: *mut pxtnPulse_NoiseBuilder) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BuildNoise@pxtnPulse_NoiseBuilder@@QEBAPEAVpxtnPulse_PCM@@PEAVpxtnPulse_Noise@@HHH@Z"]
    pub fn pxtnPulse_NoiseBuilder_BuildNoise(
        this: *const pxtnPulse_NoiseBuilder,
        p_noise: *mut pxtnPulse_Noise,
        ch: i32,
        sps: i32,
        bps: i32,
    ) -> *mut pxtnPulse_PCM;
}
extern "C" {
    #[link_name = "\u{1}??0pxtnPulse_NoiseBuilder@@QEAA@XZ"]
    pub fn pxtnPulse_NoiseBuilder_pxtnPulse_NoiseBuilder(this: *mut pxtnPulse_NoiseBuilder);
}
extern "C" {
    #[link_name = "\u{1}??_DpxtnPulse_NoiseBuilder@@QEAAXXZ"]
    pub fn pxtnPulse_NoiseBuilder_pxtnPulse_NoiseBuilder_destructor(
        this: *mut pxtnPulse_NoiseBuilder,
    );
}
impl pxtnPulse_NoiseBuilder {
    #[inline]
    pub unsafe fn Init(&mut self) -> bool {
        pxtnPulse_NoiseBuilder_Init(self)
    }
    #[inline]
    pub unsafe fn BuildNoise(
        &self,
        p_noise: *mut pxtnPulse_Noise,
        ch: i32,
        sps: i32,
        bps: i32,
    ) -> *mut pxtnPulse_PCM {
        pxtnPulse_NoiseBuilder_BuildNoise(self, p_noise, ch, sps, bps)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        pxtnPulse_NoiseBuilder_pxtnPulse_NoiseBuilder(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        pxtnPulse_NoiseBuilder_pxtnPulse_NoiseBuilder_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct pxtnText {
    pub _p_comment_buf: *mut ::std::os::raw::c_char,
    pub _comment_size: i32,
    pub _p_name_buf: *mut ::std::os::raw::c_char,
    pub _name_size: i32,
}
#[test]
fn bindgen_test_layout_pxtnText() {
    assert_eq!(
        ::std::mem::size_of::<pxtnText>(),
        32usize,
        concat!("Size of: ", stringify!(pxtnText))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnText>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnText))
    );
    fn test_field__p_comment_buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnText>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._p_comment_buf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnText),
                "::",
                stringify!(_p_comment_buf)
            )
        );
    }
    test_field__p_comment_buf();
    fn test_field__comment_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnText>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._comment_size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnText),
                "::",
                stringify!(_comment_size)
            )
        );
    }
    test_field__comment_size();
    fn test_field__p_name_buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnText>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._p_name_buf) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnText),
                "::",
                stringify!(_p_name_buf)
            )
        );
    }
    test_field__p_name_buf();
    fn test_field__name_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnText>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._name_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnText),
                "::",
                stringify!(_name_size)
            )
        );
    }
    test_field__name_size();
}
extern "C" {
    #[link_name = "\u{1}?set_comment_buf@pxtnText@@QEAA_NPEBDH@Z"]
    pub fn pxtnText_set_comment_buf(
        this: *mut pxtnText,
        p_comment: *const ::std::os::raw::c_char,
        buf_size: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?get_comment_buf@pxtnText@@QEBAPEBDPEAH@Z"]
    pub fn pxtnText_get_comment_buf(
        this: *const pxtnText,
        p_buf_size: *mut i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?is_comment_buf@pxtnText@@QEBA_NXZ"]
    pub fn pxtnText_is_comment_buf(this: *const pxtnText) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?set_name_buf@pxtnText@@QEAA_NPEBDH@Z"]
    pub fn pxtnText_set_name_buf(
        this: *mut pxtnText,
        p_name: *const ::std::os::raw::c_char,
        buf_size: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?get_name_buf@pxtnText@@QEBAPEBDPEAH@Z"]
    pub fn pxtnText_get_name_buf(
        this: *const pxtnText,
        p_buf_size: *mut i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?is_name_buf@pxtnText@@QEBA_NXZ"]
    pub fn pxtnText_is_name_buf(this: *const pxtnText) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Comment_r@pxtnText@@QEAA_NPEAVpxtnDescriptor@@@Z"]
    pub fn pxtnText_Comment_r(this: *mut pxtnText, p_doc: *mut pxtnDescriptor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Comment_w@pxtnText@@QEAA_NPEAVpxtnDescriptor@@@Z"]
    pub fn pxtnText_Comment_w(this: *mut pxtnText, p_doc: *mut pxtnDescriptor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Name_r@pxtnText@@QEAA_NPEAVpxtnDescriptor@@@Z"]
    pub fn pxtnText_Name_r(this: *mut pxtnText, p_doc: *mut pxtnDescriptor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Name_w@pxtnText@@QEAA_NPEAVpxtnDescriptor@@@Z"]
    pub fn pxtnText_Name_w(this: *mut pxtnText, p_doc: *mut pxtnDescriptor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}??0pxtnText@@QEAA@XZ"]
    pub fn pxtnText_pxtnText(this: *mut pxtnText);
}
extern "C" {
    #[link_name = "\u{1}??_DpxtnText@@QEAAXXZ"]
    pub fn pxtnText_pxtnText_destructor(this: *mut pxtnText);
}
impl pxtnText {
    #[inline]
    pub unsafe fn set_comment_buf(
        &mut self,
        p_comment: *const ::std::os::raw::c_char,
        buf_size: i32,
    ) -> bool {
        pxtnText_set_comment_buf(self, p_comment, buf_size)
    }
    #[inline]
    pub unsafe fn get_comment_buf(&self, p_buf_size: *mut i32) -> *const ::std::os::raw::c_char {
        pxtnText_get_comment_buf(self, p_buf_size)
    }
    #[inline]
    pub unsafe fn is_comment_buf(&self) -> bool {
        pxtnText_is_comment_buf(self)
    }
    #[inline]
    pub unsafe fn set_name_buf(
        &mut self,
        p_name: *const ::std::os::raw::c_char,
        buf_size: i32,
    ) -> bool {
        pxtnText_set_name_buf(self, p_name, buf_size)
    }
    #[inline]
    pub unsafe fn get_name_buf(&self, p_buf_size: *mut i32) -> *const ::std::os::raw::c_char {
        pxtnText_get_name_buf(self, p_buf_size)
    }
    #[inline]
    pub unsafe fn is_name_buf(&self) -> bool {
        pxtnText_is_name_buf(self)
    }
    #[inline]
    pub unsafe fn Comment_r(&mut self, p_doc: *mut pxtnDescriptor) -> bool {
        pxtnText_Comment_r(self, p_doc)
    }
    #[inline]
    pub unsafe fn Comment_w(&mut self, p_doc: *mut pxtnDescriptor) -> bool {
        pxtnText_Comment_w(self, p_doc)
    }
    #[inline]
    pub unsafe fn Name_r(&mut self, p_doc: *mut pxtnDescriptor) -> bool {
        pxtnText_Name_r(self, p_doc)
    }
    #[inline]
    pub unsafe fn Name_w(&mut self, p_doc: *mut pxtnDescriptor) -> bool {
        pxtnText_Name_w(self, p_doc)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        pxtnText_pxtnText(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        pxtnText_pxtnText_destructor(self)
    }
}
pub const DELAYUNIT_DELAYUNIT_Beat: DELAYUNIT = 0;
pub const DELAYUNIT_DELAYUNIT_Meas: DELAYUNIT = 1;
pub const DELAYUNIT_DELAYUNIT_Second: DELAYUNIT = 2;
pub const DELAYUNIT_DELAYUNIT_num: DELAYUNIT = 3;
pub type DELAYUNIT = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct pxtnDelay {
    pub _b_played: bool,
    pub _unit: DELAYUNIT,
    pub _group: i32,
    pub _rate: f32,
    pub _freq: f32,
    pub _smp_num: i32,
    pub _offset: i32,
    pub _bufs: [*mut i32; 2usize],
    pub _rate_s32: i32,
}
#[test]
fn bindgen_test_layout_pxtnDelay() {
    assert_eq!(
        ::std::mem::size_of::<pxtnDelay>(),
        56usize,
        concat!("Size of: ", stringify!(pxtnDelay))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnDelay>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnDelay))
    );
    fn test_field__b_played() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnDelay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._b_played) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnDelay),
                "::",
                stringify!(_b_played)
            )
        );
    }
    test_field__b_played();
    fn test_field__unit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnDelay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._unit) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnDelay),
                "::",
                stringify!(_unit)
            )
        );
    }
    test_field__unit();
    fn test_field__group() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnDelay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._group) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnDelay),
                "::",
                stringify!(_group)
            )
        );
    }
    test_field__group();
    fn test_field__rate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnDelay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._rate) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnDelay),
                "::",
                stringify!(_rate)
            )
        );
    }
    test_field__rate();
    fn test_field__freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnDelay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._freq) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnDelay),
                "::",
                stringify!(_freq)
            )
        );
    }
    test_field__freq();
    fn test_field__smp_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnDelay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._smp_num) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnDelay),
                "::",
                stringify!(_smp_num)
            )
        );
    }
    test_field__smp_num();
    fn test_field__offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnDelay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnDelay),
                "::",
                stringify!(_offset)
            )
        );
    }
    test_field__offset();
    fn test_field__bufs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnDelay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._bufs) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnDelay),
                "::",
                stringify!(_bufs)
            )
        );
    }
    test_field__bufs();
    fn test_field__rate_s32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnDelay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._rate_s32) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnDelay),
                "::",
                stringify!(_rate_s32)
            )
        );
    }
    test_field__rate_s32();
}
extern "C" {
    #[link_name = "\u{1}?Tone_Ready@pxtnDelay@@QEAA?AW4pxtnERR@@HMH@Z"]
    pub fn pxtnDelay_Tone_Ready(
        this: *mut pxtnDelay,
        beat_num: i32,
        beat_tempo: f32,
        sps: i32,
    ) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?Tone_Supple@pxtnDelay@@QEAAXHPEAH@Z"]
    pub fn pxtnDelay_Tone_Supple(this: *mut pxtnDelay, ch_num: i32, group_smps: *mut i32);
}
extern "C" {
    #[link_name = "\u{1}?Tone_Increment@pxtnDelay@@QEAAXXZ"]
    pub fn pxtnDelay_Tone_Increment(this: *mut pxtnDelay);
}
extern "C" {
    #[link_name = "\u{1}?Tone_Release@pxtnDelay@@QEAAXXZ"]
    pub fn pxtnDelay_Tone_Release(this: *mut pxtnDelay);
}
extern "C" {
    #[link_name = "\u{1}?Tone_Clear@pxtnDelay@@QEAAXXZ"]
    pub fn pxtnDelay_Tone_Clear(this: *mut pxtnDelay);
}
extern "C" {
    #[link_name = "\u{1}?Add_New@pxtnDelay@@QEAA_NW4DELAYUNIT@@MMH@Z"]
    pub fn pxtnDelay_Add_New(
        this: *mut pxtnDelay,
        scale: DELAYUNIT,
        freq: f32,
        rate: f32,
        group: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Write@pxtnDelay@@QEBA_NPEAVpxtnDescriptor@@@Z"]
    pub fn pxtnDelay_Write(this: *const pxtnDelay, p_doc: *mut pxtnDescriptor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Read@pxtnDelay@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@@Z"]
    pub fn pxtnDelay_Read(this: *mut pxtnDelay, p_doc: *mut pxtnDescriptor) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?get_unit@pxtnDelay@@QEBA?AW4DELAYUNIT@@XZ"]
    pub fn pxtnDelay_get_unit(this: *const pxtnDelay) -> DELAYUNIT;
}
extern "C" {
    #[link_name = "\u{1}?get_freq@pxtnDelay@@QEBAMXZ"]
    pub fn pxtnDelay_get_freq(this: *const pxtnDelay) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?get_rate@pxtnDelay@@QEBAMXZ"]
    pub fn pxtnDelay_get_rate(this: *const pxtnDelay) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?get_group@pxtnDelay@@QEBAHXZ"]
    pub fn pxtnDelay_get_group(this: *const pxtnDelay) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Set@pxtnDelay@@QEAAXW4DELAYUNIT@@MMH@Z"]
    pub fn pxtnDelay_Set(this: *mut pxtnDelay, unit: DELAYUNIT, freq: f32, rate: f32, group: i32);
}
extern "C" {
    #[link_name = "\u{1}?get_played@pxtnDelay@@QEBA_NXZ"]
    pub fn pxtnDelay_get_played(this: *const pxtnDelay) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?set_played@pxtnDelay@@QEAAX_N@Z"]
    pub fn pxtnDelay_set_played(this: *mut pxtnDelay, b: bool);
}
extern "C" {
    #[link_name = "\u{1}?switch_played@pxtnDelay@@QEAA_NXZ"]
    pub fn pxtnDelay_switch_played(this: *mut pxtnDelay) -> bool;
}
extern "C" {
    #[link_name = "\u{1}??0pxtnDelay@@QEAA@XZ"]
    pub fn pxtnDelay_pxtnDelay(this: *mut pxtnDelay);
}
extern "C" {
    #[link_name = "\u{1}??_DpxtnDelay@@QEAAXXZ"]
    pub fn pxtnDelay_pxtnDelay_destructor(this: *mut pxtnDelay);
}
impl pxtnDelay {
    #[inline]
    pub unsafe fn Tone_Ready(&mut self, beat_num: i32, beat_tempo: f32, sps: i32) -> pxtnERR {
        pxtnDelay_Tone_Ready(self, beat_num, beat_tempo, sps)
    }
    #[inline]
    pub unsafe fn Tone_Supple(&mut self, ch_num: i32, group_smps: *mut i32) {
        pxtnDelay_Tone_Supple(self, ch_num, group_smps)
    }
    #[inline]
    pub unsafe fn Tone_Increment(&mut self) {
        pxtnDelay_Tone_Increment(self)
    }
    #[inline]
    pub unsafe fn Tone_Release(&mut self) {
        pxtnDelay_Tone_Release(self)
    }
    #[inline]
    pub unsafe fn Tone_Clear(&mut self) {
        pxtnDelay_Tone_Clear(self)
    }
    #[inline]
    pub unsafe fn Add_New(&mut self, scale: DELAYUNIT, freq: f32, rate: f32, group: i32) -> bool {
        pxtnDelay_Add_New(self, scale, freq, rate, group)
    }
    #[inline]
    pub unsafe fn Write(&self, p_doc: *mut pxtnDescriptor) -> bool {
        pxtnDelay_Write(self, p_doc)
    }
    #[inline]
    pub unsafe fn Read(&mut self, p_doc: *mut pxtnDescriptor) -> pxtnERR {
        pxtnDelay_Read(self, p_doc)
    }
    #[inline]
    pub unsafe fn get_unit(&self) -> DELAYUNIT {
        pxtnDelay_get_unit(self)
    }
    #[inline]
    pub unsafe fn get_freq(&self) -> f32 {
        pxtnDelay_get_freq(self)
    }
    #[inline]
    pub unsafe fn get_rate(&self) -> f32 {
        pxtnDelay_get_rate(self)
    }
    #[inline]
    pub unsafe fn get_group(&self) -> i32 {
        pxtnDelay_get_group(self)
    }
    #[inline]
    pub unsafe fn Set(&mut self, unit: DELAYUNIT, freq: f32, rate: f32, group: i32) {
        pxtnDelay_Set(self, unit, freq, rate, group)
    }
    #[inline]
    pub unsafe fn get_played(&self) -> bool {
        pxtnDelay_get_played(self)
    }
    #[inline]
    pub unsafe fn set_played(&mut self, b: bool) {
        pxtnDelay_set_played(self, b)
    }
    #[inline]
    pub unsafe fn switch_played(&mut self) -> bool {
        pxtnDelay_switch_played(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        pxtnDelay_pxtnDelay(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        pxtnDelay_pxtnDelay_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct pxtnOverDrive {
    pub _b_played: bool,
    pub _group: i32,
    pub _cut_f: f32,
    pub _amp_f: f32,
    pub _cut_16bit_top: i32,
}
#[test]
fn bindgen_test_layout_pxtnOverDrive() {
    assert_eq!(
        ::std::mem::size_of::<pxtnOverDrive>(),
        20usize,
        concat!("Size of: ", stringify!(pxtnOverDrive))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnOverDrive>(),
        4usize,
        concat!("Alignment of ", stringify!(pxtnOverDrive))
    );
    fn test_field__b_played() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnOverDrive>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._b_played) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnOverDrive),
                "::",
                stringify!(_b_played)
            )
        );
    }
    test_field__b_played();
    fn test_field__group() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnOverDrive>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._group) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnOverDrive),
                "::",
                stringify!(_group)
            )
        );
    }
    test_field__group();
    fn test_field__cut_f() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnOverDrive>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._cut_f) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnOverDrive),
                "::",
                stringify!(_cut_f)
            )
        );
    }
    test_field__cut_f();
    fn test_field__amp_f() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnOverDrive>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._amp_f) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnOverDrive),
                "::",
                stringify!(_amp_f)
            )
        );
    }
    test_field__amp_f();
    fn test_field__cut_16bit_top() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnOverDrive>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._cut_16bit_top) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnOverDrive),
                "::",
                stringify!(_cut_16bit_top)
            )
        );
    }
    test_field__cut_16bit_top();
}
extern "C" {
    #[link_name = "\u{1}?Tone_Ready@pxtnOverDrive@@QEAAXXZ"]
    pub fn pxtnOverDrive_Tone_Ready(this: *mut pxtnOverDrive);
}
extern "C" {
    #[link_name = "\u{1}?Tone_Supple@pxtnOverDrive@@QEBAXPEAH@Z"]
    pub fn pxtnOverDrive_Tone_Supple(this: *const pxtnOverDrive, group_smps: *mut i32);
}
extern "C" {
    #[link_name = "\u{1}?Write@pxtnOverDrive@@QEBA_NPEAVpxtnDescriptor@@@Z"]
    pub fn pxtnOverDrive_Write(this: *const pxtnOverDrive, p_doc: *mut pxtnDescriptor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Read@pxtnOverDrive@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@@Z"]
    pub fn pxtnOverDrive_Read(this: *mut pxtnOverDrive, p_doc: *mut pxtnDescriptor) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?get_cut@pxtnOverDrive@@QEBAMXZ"]
    pub fn pxtnOverDrive_get_cut(this: *const pxtnOverDrive) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?get_amp@pxtnOverDrive@@QEBAMXZ"]
    pub fn pxtnOverDrive_get_amp(this: *const pxtnOverDrive) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?get_group@pxtnOverDrive@@QEBAHXZ"]
    pub fn pxtnOverDrive_get_group(this: *const pxtnOverDrive) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Set@pxtnOverDrive@@QEAAXMMH@Z"]
    pub fn pxtnOverDrive_Set(this: *mut pxtnOverDrive, cut: f32, amp: f32, group: i32);
}
extern "C" {
    #[link_name = "\u{1}?get_played@pxtnOverDrive@@QEBA_NXZ"]
    pub fn pxtnOverDrive_get_played(this: *const pxtnOverDrive) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?set_played@pxtnOverDrive@@QEAAX_N@Z"]
    pub fn pxtnOverDrive_set_played(this: *mut pxtnOverDrive, b: bool);
}
extern "C" {
    #[link_name = "\u{1}?switch_played@pxtnOverDrive@@QEAA_NXZ"]
    pub fn pxtnOverDrive_switch_played(this: *mut pxtnOverDrive) -> bool;
}
extern "C" {
    #[link_name = "\u{1}??0pxtnOverDrive@@QEAA@XZ"]
    pub fn pxtnOverDrive_pxtnOverDrive(this: *mut pxtnOverDrive);
}
extern "C" {
    #[link_name = "\u{1}??_DpxtnOverDrive@@QEAAXXZ"]
    pub fn pxtnOverDrive_pxtnOverDrive_destructor(this: *mut pxtnOverDrive);
}
impl pxtnOverDrive {
    #[inline]
    pub unsafe fn Tone_Ready(&mut self) {
        pxtnOverDrive_Tone_Ready(self)
    }
    #[inline]
    pub unsafe fn Tone_Supple(&self, group_smps: *mut i32) {
        pxtnOverDrive_Tone_Supple(self, group_smps)
    }
    #[inline]
    pub unsafe fn Write(&self, p_doc: *mut pxtnDescriptor) -> bool {
        pxtnOverDrive_Write(self, p_doc)
    }
    #[inline]
    pub unsafe fn Read(&mut self, p_doc: *mut pxtnDescriptor) -> pxtnERR {
        pxtnOverDrive_Read(self, p_doc)
    }
    #[inline]
    pub unsafe fn get_cut(&self) -> f32 {
        pxtnOverDrive_get_cut(self)
    }
    #[inline]
    pub unsafe fn get_amp(&self) -> f32 {
        pxtnOverDrive_get_amp(self)
    }
    #[inline]
    pub unsafe fn get_group(&self) -> i32 {
        pxtnOverDrive_get_group(self)
    }
    #[inline]
    pub unsafe fn Set(&mut self, cut: f32, amp: f32, group: i32) {
        pxtnOverDrive_Set(self, cut, amp, group)
    }
    #[inline]
    pub unsafe fn get_played(&self) -> bool {
        pxtnOverDrive_get_played(self)
    }
    #[inline]
    pub unsafe fn set_played(&mut self, b: bool) {
        pxtnOverDrive_set_played(self, b)
    }
    #[inline]
    pub unsafe fn switch_played(&mut self) -> bool {
        pxtnOverDrive_switch_played(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        pxtnOverDrive_pxtnOverDrive(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        pxtnOverDrive_pxtnOverDrive_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct pxtnMaster {
    pub _beat_num: i32,
    pub _beat_tempo: f32,
    pub _beat_clock: i32,
    pub _meas_num: i32,
    pub _repeat_meas: i32,
    pub _last_meas: i32,
    pub _volume_: i32,
}
#[test]
fn bindgen_test_layout_pxtnMaster() {
    assert_eq!(
        ::std::mem::size_of::<pxtnMaster>(),
        28usize,
        concat!("Size of: ", stringify!(pxtnMaster))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnMaster>(),
        4usize,
        concat!("Alignment of ", stringify!(pxtnMaster))
    );
    fn test_field__beat_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnMaster>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._beat_num) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnMaster),
                "::",
                stringify!(_beat_num)
            )
        );
    }
    test_field__beat_num();
    fn test_field__beat_tempo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnMaster>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._beat_tempo) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnMaster),
                "::",
                stringify!(_beat_tempo)
            )
        );
    }
    test_field__beat_tempo();
    fn test_field__beat_clock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnMaster>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._beat_clock) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnMaster),
                "::",
                stringify!(_beat_clock)
            )
        );
    }
    test_field__beat_clock();
    fn test_field__meas_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnMaster>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._meas_num) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnMaster),
                "::",
                stringify!(_meas_num)
            )
        );
    }
    test_field__meas_num();
    fn test_field__repeat_meas() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnMaster>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._repeat_meas) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnMaster),
                "::",
                stringify!(_repeat_meas)
            )
        );
    }
    test_field__repeat_meas();
    fn test_field__last_meas() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnMaster>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._last_meas) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnMaster),
                "::",
                stringify!(_last_meas)
            )
        );
    }
    test_field__last_meas();
    fn test_field__volume_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnMaster>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._volume_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnMaster),
                "::",
                stringify!(_volume_)
            )
        );
    }
    test_field__volume_();
}
extern "C" {
    #[link_name = "\u{1}?Reset@pxtnMaster@@QEAAXXZ"]
    pub fn pxtnMaster_Reset(this: *mut pxtnMaster);
}
extern "C" {
    #[link_name = "\u{1}?Set@pxtnMaster@@QEAAXHMH@Z"]
    pub fn pxtnMaster_Set(this: *mut pxtnMaster, beat_num: i32, beat_tempo: f32, beat_clock: i32);
}
extern "C" {
    #[link_name = "\u{1}?Get@pxtnMaster@@QEBAXPEAHPEAM00@Z"]
    pub fn pxtnMaster_Get(
        this: *const pxtnMaster,
        p_beat_num: *mut i32,
        p_beat_tempo: *mut f32,
        p_beat_clock: *mut i32,
        p_meas_num: *mut i32,
    );
}
extern "C" {
    #[link_name = "\u{1}?get_beat_num@pxtnMaster@@QEBAHXZ"]
    pub fn pxtnMaster_get_beat_num(this: *const pxtnMaster) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_beat_tempo@pxtnMaster@@QEBAMXZ"]
    pub fn pxtnMaster_get_beat_tempo(this: *const pxtnMaster) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?get_beat_clock@pxtnMaster@@QEBAHXZ"]
    pub fn pxtnMaster_get_beat_clock(this: *const pxtnMaster) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_meas_num@pxtnMaster@@QEBAHXZ"]
    pub fn pxtnMaster_get_meas_num(this: *const pxtnMaster) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_repeat_meas@pxtnMaster@@QEBAHXZ"]
    pub fn pxtnMaster_get_repeat_meas(this: *const pxtnMaster) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_last_meas@pxtnMaster@@QEBAHXZ"]
    pub fn pxtnMaster_get_last_meas(this: *const pxtnMaster) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_last_clock@pxtnMaster@@QEBAHXZ"]
    pub fn pxtnMaster_get_last_clock(this: *const pxtnMaster) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_play_meas@pxtnMaster@@QEBAHXZ"]
    pub fn pxtnMaster_get_play_meas(this: *const pxtnMaster) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?set_meas_num@pxtnMaster@@QEAAXH@Z"]
    pub fn pxtnMaster_set_meas_num(this: *mut pxtnMaster, meas_num: i32);
}
extern "C" {
    #[link_name = "\u{1}?set_repeat_meas@pxtnMaster@@QEAAXH@Z"]
    pub fn pxtnMaster_set_repeat_meas(this: *mut pxtnMaster, meas: i32);
}
extern "C" {
    #[link_name = "\u{1}?set_last_meas@pxtnMaster@@QEAAXH@Z"]
    pub fn pxtnMaster_set_last_meas(this: *mut pxtnMaster, meas: i32);
}
extern "C" {
    #[link_name = "\u{1}?set_beat_clock@pxtnMaster@@QEAAXH@Z"]
    pub fn pxtnMaster_set_beat_clock(this: *mut pxtnMaster, beat_clock: i32);
}
extern "C" {
    #[link_name = "\u{1}?AdjustMeasNum@pxtnMaster@@QEAAXH@Z"]
    pub fn pxtnMaster_AdjustMeasNum(this: *mut pxtnMaster, clock: i32);
}
extern "C" {
    #[link_name = "\u{1}?get_this_clock@pxtnMaster@@QEBAHHHH@Z"]
    pub fn pxtnMaster_get_this_clock(
        this: *const pxtnMaster,
        meas: i32,
        beat: i32,
        clock: i32,
    ) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?io_w_v5@pxtnMaster@@QEBA_NPEAVpxtnDescriptor@@H@Z"]
    pub fn pxtnMaster_io_w_v5(
        this: *const pxtnMaster,
        p_doc: *mut pxtnDescriptor,
        rough: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?io_r_v5@pxtnMaster@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@@Z"]
    pub fn pxtnMaster_io_r_v5(this: *mut pxtnMaster, p_doc: *mut pxtnDescriptor) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?io_r_v5_EventNum@pxtnMaster@@QEAAHPEAVpxtnDescriptor@@@Z"]
    pub fn pxtnMaster_io_r_v5_EventNum(this: *mut pxtnMaster, p_doc: *mut pxtnDescriptor) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?io_r_x4x@pxtnMaster@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@@Z"]
    pub fn pxtnMaster_io_r_x4x(this: *mut pxtnMaster, p_doc: *mut pxtnDescriptor) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?io_r_x4x_EventNum@pxtnMaster@@QEAAHPEAVpxtnDescriptor@@@Z"]
    pub fn pxtnMaster_io_r_x4x_EventNum(this: *mut pxtnMaster, p_doc: *mut pxtnDescriptor) -> i32;
}
extern "C" {
    #[link_name = "\u{1}??0pxtnMaster@@QEAA@XZ"]
    pub fn pxtnMaster_pxtnMaster(this: *mut pxtnMaster);
}
extern "C" {
    #[link_name = "\u{1}??_DpxtnMaster@@QEAAXXZ"]
    pub fn pxtnMaster_pxtnMaster_destructor(this: *mut pxtnMaster);
}
impl pxtnMaster {
    #[inline]
    pub unsafe fn Reset(&mut self) {
        pxtnMaster_Reset(self)
    }
    #[inline]
    pub unsafe fn Set(&mut self, beat_num: i32, beat_tempo: f32, beat_clock: i32) {
        pxtnMaster_Set(self, beat_num, beat_tempo, beat_clock)
    }
    #[inline]
    pub unsafe fn Get(
        &self,
        p_beat_num: *mut i32,
        p_beat_tempo: *mut f32,
        p_beat_clock: *mut i32,
        p_meas_num: *mut i32,
    ) {
        pxtnMaster_Get(self, p_beat_num, p_beat_tempo, p_beat_clock, p_meas_num)
    }
    #[inline]
    pub unsafe fn get_beat_num(&self) -> i32 {
        pxtnMaster_get_beat_num(self)
    }
    #[inline]
    pub unsafe fn get_beat_tempo(&self) -> f32 {
        pxtnMaster_get_beat_tempo(self)
    }
    #[inline]
    pub unsafe fn get_beat_clock(&self) -> i32 {
        pxtnMaster_get_beat_clock(self)
    }
    #[inline]
    pub unsafe fn get_meas_num(&self) -> i32 {
        pxtnMaster_get_meas_num(self)
    }
    #[inline]
    pub unsafe fn get_repeat_meas(&self) -> i32 {
        pxtnMaster_get_repeat_meas(self)
    }
    #[inline]
    pub unsafe fn get_last_meas(&self) -> i32 {
        pxtnMaster_get_last_meas(self)
    }
    #[inline]
    pub unsafe fn get_last_clock(&self) -> i32 {
        pxtnMaster_get_last_clock(self)
    }
    #[inline]
    pub unsafe fn get_play_meas(&self) -> i32 {
        pxtnMaster_get_play_meas(self)
    }
    #[inline]
    pub unsafe fn set_meas_num(&mut self, meas_num: i32) {
        pxtnMaster_set_meas_num(self, meas_num)
    }
    #[inline]
    pub unsafe fn set_repeat_meas(&mut self, meas: i32) {
        pxtnMaster_set_repeat_meas(self, meas)
    }
    #[inline]
    pub unsafe fn set_last_meas(&mut self, meas: i32) {
        pxtnMaster_set_last_meas(self, meas)
    }
    #[inline]
    pub unsafe fn set_beat_clock(&mut self, beat_clock: i32) {
        pxtnMaster_set_beat_clock(self, beat_clock)
    }
    #[inline]
    pub unsafe fn AdjustMeasNum(&mut self, clock: i32) {
        pxtnMaster_AdjustMeasNum(self, clock)
    }
    #[inline]
    pub unsafe fn get_this_clock(&self, meas: i32, beat: i32, clock: i32) -> i32 {
        pxtnMaster_get_this_clock(self, meas, beat, clock)
    }
    #[inline]
    pub unsafe fn io_w_v5(&self, p_doc: *mut pxtnDescriptor, rough: i32) -> bool {
        pxtnMaster_io_w_v5(self, p_doc, rough)
    }
    #[inline]
    pub unsafe fn io_r_v5(&mut self, p_doc: *mut pxtnDescriptor) -> pxtnERR {
        pxtnMaster_io_r_v5(self, p_doc)
    }
    #[inline]
    pub unsafe fn io_r_v5_EventNum(&mut self, p_doc: *mut pxtnDescriptor) -> i32 {
        pxtnMaster_io_r_v5_EventNum(self, p_doc)
    }
    #[inline]
    pub unsafe fn io_r_x4x(&mut self, p_doc: *mut pxtnDescriptor) -> pxtnERR {
        pxtnMaster_io_r_x4x(self, p_doc)
    }
    #[inline]
    pub unsafe fn io_r_x4x_EventNum(&mut self, p_doc: *mut pxtnDescriptor) -> i32 {
        pxtnMaster_io_r_x4x_EventNum(self, p_doc)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        pxtnMaster_pxtnMaster(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        pxtnMaster_pxtnMaster_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct pxtnPulse_Oggv {
    pub _ch: i32,
    pub _sps2: i32,
    pub _smp_num: i32,
    pub _size: i32,
    pub _p_data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_pxtnPulse_Oggv() {
    assert_eq!(
        ::std::mem::size_of::<pxtnPulse_Oggv>(),
        24usize,
        concat!("Size of: ", stringify!(pxtnPulse_Oggv))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnPulse_Oggv>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnPulse_Oggv))
    );
    fn test_field__ch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_Oggv>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._ch) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_Oggv),
                "::",
                stringify!(_ch)
            )
        );
    }
    test_field__ch();
    fn test_field__sps2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_Oggv>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._sps2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_Oggv),
                "::",
                stringify!(_sps2)
            )
        );
    }
    test_field__sps2();
    fn test_field__smp_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_Oggv>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._smp_num) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_Oggv),
                "::",
                stringify!(_smp_num)
            )
        );
    }
    test_field__smp_num();
    fn test_field__size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_Oggv>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_Oggv),
                "::",
                stringify!(_size)
            )
        );
    }
    test_field__size();
    fn test_field__p_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnPulse_Oggv>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._p_data) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnPulse_Oggv),
                "::",
                stringify!(_p_data)
            )
        );
    }
    test_field__p_data();
}
extern "C" {
    #[link_name = "\u{1}?Decode@pxtnPulse_Oggv@@QEBA?AW4pxtnERR@@PEAVpxtnPulse_PCM@@@Z"]
    pub fn pxtnPulse_Oggv_Decode(this: *const pxtnPulse_Oggv, p_pcm: *mut pxtnPulse_PCM)
        -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?Release@pxtnPulse_Oggv@@QEAAXXZ"]
    pub fn pxtnPulse_Oggv_Release(this: *mut pxtnPulse_Oggv);
}
extern "C" {
    #[link_name = "\u{1}?GetInfo@pxtnPulse_Oggv@@QEAA_NPEAH00@Z"]
    pub fn pxtnPulse_Oggv_GetInfo(
        this: *mut pxtnPulse_Oggv,
        p_ch: *mut ::std::os::raw::c_int,
        p_sps: *mut ::std::os::raw::c_int,
        p_smp_num: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetSize@pxtnPulse_Oggv@@QEBAHXZ"]
    pub fn pxtnPulse_Oggv_GetSize(this: *const pxtnPulse_Oggv) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?ogg_write@pxtnPulse_Oggv@@QEBA_NPEAVpxtnDescriptor@@@Z"]
    pub fn pxtnPulse_Oggv_ogg_write(
        this: *const pxtnPulse_Oggv,
        p_doc: *mut pxtnDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ogg_read@pxtnPulse_Oggv@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@@Z"]
    pub fn pxtnPulse_Oggv_ogg_read(
        this: *mut pxtnPulse_Oggv,
        p_doc: *mut pxtnDescriptor,
    ) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?pxtn_write@pxtnPulse_Oggv@@QEBA_NPEAVpxtnDescriptor@@@Z"]
    pub fn pxtnPulse_Oggv_pxtn_write(
        this: *const pxtnPulse_Oggv,
        p_doc: *mut pxtnDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?pxtn_read@pxtnPulse_Oggv@@QEAA_NPEAVpxtnDescriptor@@@Z"]
    pub fn pxtnPulse_Oggv_pxtn_read(this: *mut pxtnPulse_Oggv, p_doc: *mut pxtnDescriptor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Copy@pxtnPulse_Oggv@@QEBA_NPEAV1@@Z"]
    pub fn pxtnPulse_Oggv_Copy(this: *const pxtnPulse_Oggv, p_dst: *mut pxtnPulse_Oggv) -> bool;
}
extern "C" {
    #[link_name = "\u{1}??0pxtnPulse_Oggv@@QEAA@XZ"]
    pub fn pxtnPulse_Oggv_pxtnPulse_Oggv(this: *mut pxtnPulse_Oggv);
}
extern "C" {
    #[link_name = "\u{1}??_DpxtnPulse_Oggv@@QEAAXXZ"]
    pub fn pxtnPulse_Oggv_pxtnPulse_Oggv_destructor(this: *mut pxtnPulse_Oggv);
}
impl pxtnPulse_Oggv {
    #[inline]
    pub unsafe fn Decode(&self, p_pcm: *mut pxtnPulse_PCM) -> pxtnERR {
        pxtnPulse_Oggv_Decode(self, p_pcm)
    }
    #[inline]
    pub unsafe fn Release(&mut self) {
        pxtnPulse_Oggv_Release(self)
    }
    #[inline]
    pub unsafe fn GetInfo(
        &mut self,
        p_ch: *mut ::std::os::raw::c_int,
        p_sps: *mut ::std::os::raw::c_int,
        p_smp_num: *mut ::std::os::raw::c_int,
    ) -> bool {
        pxtnPulse_Oggv_GetInfo(self, p_ch, p_sps, p_smp_num)
    }
    #[inline]
    pub unsafe fn GetSize(&self) -> i32 {
        pxtnPulse_Oggv_GetSize(self)
    }
    #[inline]
    pub unsafe fn ogg_write(&self, p_doc: *mut pxtnDescriptor) -> bool {
        pxtnPulse_Oggv_ogg_write(self, p_doc)
    }
    #[inline]
    pub unsafe fn ogg_read(&mut self, p_doc: *mut pxtnDescriptor) -> pxtnERR {
        pxtnPulse_Oggv_ogg_read(self, p_doc)
    }
    #[inline]
    pub unsafe fn pxtn_write(&self, p_doc: *mut pxtnDescriptor) -> bool {
        pxtnPulse_Oggv_pxtn_write(self, p_doc)
    }
    #[inline]
    pub unsafe fn pxtn_read(&mut self, p_doc: *mut pxtnDescriptor) -> bool {
        pxtnPulse_Oggv_pxtn_read(self, p_doc)
    }
    #[inline]
    pub unsafe fn Copy(&self, p_dst: *mut pxtnPulse_Oggv) -> bool {
        pxtnPulse_Oggv_Copy(self, p_dst)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        pxtnPulse_Oggv_pxtnPulse_Oggv(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        pxtnPulse_Oggv_pxtnPulse_Oggv_destructor(self)
    }
}
pub const pxtnWOICETYPE_pxtnWOICE_None: pxtnWOICETYPE = 0;
pub const pxtnWOICETYPE_pxtnWOICE_PCM: pxtnWOICETYPE = 1;
pub const pxtnWOICETYPE_pxtnWOICE_PTV: pxtnWOICETYPE = 2;
pub const pxtnWOICETYPE_pxtnWOICE_PTN: pxtnWOICETYPE = 3;
pub const pxtnWOICETYPE_pxtnWOICE_OGGV: pxtnWOICETYPE = 4;
pub type pxtnWOICETYPE = ::std::os::raw::c_int;
pub const pxtnVOICETYPE_pxtnVOICE_Coodinate: pxtnVOICETYPE = 0;
pub const pxtnVOICETYPE_pxtnVOICE_Overtone: pxtnVOICETYPE = 1;
pub const pxtnVOICETYPE_pxtnVOICE_Noise: pxtnVOICETYPE = 2;
pub const pxtnVOICETYPE_pxtnVOICE_Sampling: pxtnVOICETYPE = 3;
pub const pxtnVOICETYPE_pxtnVOICE_OggVorbis: pxtnVOICETYPE = 4;
pub type pxtnVOICETYPE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pxtnVOICEINSTANCE {
    pub smp_head_w: i32,
    pub smp_body_w: i32,
    pub smp_tail_w: i32,
    pub p_smp_w: *mut u8,
    pub p_env: *mut u8,
    pub env_size: i32,
    pub env_release: i32,
}
#[test]
fn bindgen_test_layout_pxtnVOICEINSTANCE() {
    assert_eq!(
        ::std::mem::size_of::<pxtnVOICEINSTANCE>(),
        40usize,
        concat!("Size of: ", stringify!(pxtnVOICEINSTANCE))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnVOICEINSTANCE>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnVOICEINSTANCE))
    );
    fn test_field_smp_head_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEINSTANCE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smp_head_w) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEINSTANCE),
                "::",
                stringify!(smp_head_w)
            )
        );
    }
    test_field_smp_head_w();
    fn test_field_smp_body_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEINSTANCE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smp_body_w) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEINSTANCE),
                "::",
                stringify!(smp_body_w)
            )
        );
    }
    test_field_smp_body_w();
    fn test_field_smp_tail_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEINSTANCE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smp_tail_w) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEINSTANCE),
                "::",
                stringify!(smp_tail_w)
            )
        );
    }
    test_field_smp_tail_w();
    fn test_field_p_smp_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEINSTANCE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_smp_w) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEINSTANCE),
                "::",
                stringify!(p_smp_w)
            )
        );
    }
    test_field_p_smp_w();
    fn test_field_p_env() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEINSTANCE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_env) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEINSTANCE),
                "::",
                stringify!(p_env)
            )
        );
    }
    test_field_p_env();
    fn test_field_env_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEINSTANCE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).env_size) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEINSTANCE),
                "::",
                stringify!(env_size)
            )
        );
    }
    test_field_env_size();
    fn test_field_env_release() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEINSTANCE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).env_release) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEINSTANCE),
                "::",
                stringify!(env_release)
            )
        );
    }
    test_field_env_release();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pxtnVOICEENVELOPE {
    pub fps: i32,
    pub head_num: i32,
    pub body_num: i32,
    pub tail_num: i32,
    pub points: *mut pxtnPOINT,
}
#[test]
fn bindgen_test_layout_pxtnVOICEENVELOPE() {
    assert_eq!(
        ::std::mem::size_of::<pxtnVOICEENVELOPE>(),
        24usize,
        concat!("Size of: ", stringify!(pxtnVOICEENVELOPE))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnVOICEENVELOPE>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnVOICEENVELOPE))
    );
    fn test_field_fps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEENVELOPE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fps) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEENVELOPE),
                "::",
                stringify!(fps)
            )
        );
    }
    test_field_fps();
    fn test_field_head_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEENVELOPE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).head_num) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEENVELOPE),
                "::",
                stringify!(head_num)
            )
        );
    }
    test_field_head_num();
    fn test_field_body_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEENVELOPE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_num) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEENVELOPE),
                "::",
                stringify!(body_num)
            )
        );
    }
    test_field_body_num();
    fn test_field_tail_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEENVELOPE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tail_num) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEENVELOPE),
                "::",
                stringify!(tail_num)
            )
        );
    }
    test_field_tail_num();
    fn test_field_points() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEENVELOPE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).points) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEENVELOPE),
                "::",
                stringify!(points)
            )
        );
    }
    test_field_points();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pxtnVOICEWAVE {
    pub num: i32,
    pub reso: i32,
    pub points: *mut pxtnPOINT,
}
#[test]
fn bindgen_test_layout_pxtnVOICEWAVE() {
    assert_eq!(
        ::std::mem::size_of::<pxtnVOICEWAVE>(),
        16usize,
        concat!("Size of: ", stringify!(pxtnVOICEWAVE))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnVOICEWAVE>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnVOICEWAVE))
    );
    fn test_field_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEWAVE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEWAVE),
                "::",
                stringify!(num)
            )
        );
    }
    test_field_num();
    fn test_field_reso() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEWAVE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reso) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEWAVE),
                "::",
                stringify!(reso)
            )
        );
    }
    test_field_reso();
    fn test_field_points() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEWAVE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).points) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEWAVE),
                "::",
                stringify!(points)
            )
        );
    }
    test_field_points();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pxtnVOICEUNIT {
    pub basic_key: i32,
    pub volume: i32,
    pub pan: i32,
    pub tuning: f32,
    pub voice_flags: u32,
    pub data_flags: u32,
    pub type_: pxtnVOICETYPE,
    pub p_pcm: *mut pxtnPulse_PCM,
    pub p_ptn: *mut pxtnPulse_Noise,
    pub p_oggv: *mut pxtnPulse_Oggv,
    pub wave: pxtnVOICEWAVE,
    pub envelope: pxtnVOICEENVELOPE,
}
#[test]
fn bindgen_test_layout_pxtnVOICEUNIT() {
    assert_eq!(
        ::std::mem::size_of::<pxtnVOICEUNIT>(),
        96usize,
        concat!("Size of: ", stringify!(pxtnVOICEUNIT))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnVOICEUNIT>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnVOICEUNIT))
    );
    fn test_field_basic_key() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEUNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).basic_key) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEUNIT),
                "::",
                stringify!(basic_key)
            )
        );
    }
    test_field_basic_key();
    fn test_field_volume() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEUNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).volume) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEUNIT),
                "::",
                stringify!(volume)
            )
        );
    }
    test_field_volume();
    fn test_field_pan() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEUNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pan) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEUNIT),
                "::",
                stringify!(pan)
            )
        );
    }
    test_field_pan();
    fn test_field_tuning() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEUNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tuning) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEUNIT),
                "::",
                stringify!(tuning)
            )
        );
    }
    test_field_tuning();
    fn test_field_voice_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEUNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).voice_flags) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEUNIT),
                "::",
                stringify!(voice_flags)
            )
        );
    }
    test_field_voice_flags();
    fn test_field_data_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEUNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data_flags) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEUNIT),
                "::",
                stringify!(data_flags)
            )
        );
    }
    test_field_data_flags();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEUNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEUNIT),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_p_pcm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEUNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_pcm) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEUNIT),
                "::",
                stringify!(p_pcm)
            )
        );
    }
    test_field_p_pcm();
    fn test_field_p_ptn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEUNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_ptn) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEUNIT),
                "::",
                stringify!(p_ptn)
            )
        );
    }
    test_field_p_ptn();
    fn test_field_p_oggv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEUNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_oggv) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEUNIT),
                "::",
                stringify!(p_oggv)
            )
        );
    }
    test_field_p_oggv();
    fn test_field_wave() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEUNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wave) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEUNIT),
                "::",
                stringify!(wave)
            )
        );
    }
    test_field_wave();
    fn test_field_envelope() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICEUNIT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).envelope) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICEUNIT),
                "::",
                stringify!(envelope)
            )
        );
    }
    test_field_envelope();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pxtnVOICETONE {
    pub smp_pos: f64,
    pub offset_freq: f32,
    pub env_volume: i32,
    pub life_count: i32,
    pub on_count: i32,
    pub smp_count: i32,
    pub env_start: i32,
    pub env_pos: i32,
    pub env_release_clock: i32,
    pub smooth_volume: i32,
}
#[test]
fn bindgen_test_layout_pxtnVOICETONE() {
    assert_eq!(
        ::std::mem::size_of::<pxtnVOICETONE>(),
        48usize,
        concat!("Size of: ", stringify!(pxtnVOICETONE))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnVOICETONE>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnVOICETONE))
    );
    fn test_field_smp_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICETONE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smp_pos) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICETONE),
                "::",
                stringify!(smp_pos)
            )
        );
    }
    test_field_smp_pos();
    fn test_field_offset_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICETONE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset_freq) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICETONE),
                "::",
                stringify!(offset_freq)
            )
        );
    }
    test_field_offset_freq();
    fn test_field_env_volume() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICETONE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).env_volume) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICETONE),
                "::",
                stringify!(env_volume)
            )
        );
    }
    test_field_env_volume();
    fn test_field_life_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICETONE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).life_count) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICETONE),
                "::",
                stringify!(life_count)
            )
        );
    }
    test_field_life_count();
    fn test_field_on_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICETONE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).on_count) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICETONE),
                "::",
                stringify!(on_count)
            )
        );
    }
    test_field_on_count();
    fn test_field_smp_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICETONE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smp_count) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICETONE),
                "::",
                stringify!(smp_count)
            )
        );
    }
    test_field_smp_count();
    fn test_field_env_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICETONE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).env_start) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICETONE),
                "::",
                stringify!(env_start)
            )
        );
    }
    test_field_env_start();
    fn test_field_env_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICETONE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).env_pos) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICETONE),
                "::",
                stringify!(env_pos)
            )
        );
    }
    test_field_env_pos();
    fn test_field_env_release_clock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICETONE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).env_release_clock) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICETONE),
                "::",
                stringify!(env_release_clock)
            )
        );
    }
    test_field_env_release_clock();
    fn test_field_smooth_volume() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOICETONE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smooth_volume) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOICETONE),
                "::",
                stringify!(smooth_volume)
            )
        );
    }
    test_field_smooth_volume();
}
#[repr(C)]
#[derive(Debug)]
pub struct pxtnWoice {
    pub _voice_num: i32,
    pub _name_buf: [::std::os::raw::c_char; 17usize],
    pub _name_size: i32,
    pub _type: pxtnWOICETYPE,
    pub _voices: *mut pxtnVOICEUNIT,
    pub _voinsts: *mut pxtnVOICEINSTANCE,
    pub _x3x_tuning: f32,
    pub _x3x_basic_key: i32,
}
#[test]
fn bindgen_test_layout_pxtnWoice() {
    assert_eq!(
        ::std::mem::size_of::<pxtnWoice>(),
        56usize,
        concat!("Size of: ", stringify!(pxtnWoice))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnWoice>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnWoice))
    );
    fn test_field__voice_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnWoice>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._voice_num) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnWoice),
                "::",
                stringify!(_voice_num)
            )
        );
    }
    test_field__voice_num();
    fn test_field__name_buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnWoice>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._name_buf) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnWoice),
                "::",
                stringify!(_name_buf)
            )
        );
    }
    test_field__name_buf();
    fn test_field__name_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnWoice>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._name_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnWoice),
                "::",
                stringify!(_name_size)
            )
        );
    }
    test_field__name_size();
    fn test_field__type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnWoice>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._type) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnWoice),
                "::",
                stringify!(_type)
            )
        );
    }
    test_field__type();
    fn test_field__voices() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnWoice>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._voices) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnWoice),
                "::",
                stringify!(_voices)
            )
        );
    }
    test_field__voices();
    fn test_field__voinsts() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnWoice>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._voinsts) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnWoice),
                "::",
                stringify!(_voinsts)
            )
        );
    }
    test_field__voinsts();
    fn test_field__x3x_tuning() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnWoice>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._x3x_tuning) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnWoice),
                "::",
                stringify!(_x3x_tuning)
            )
        );
    }
    test_field__x3x_tuning();
    fn test_field__x3x_basic_key() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnWoice>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._x3x_basic_key) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnWoice),
                "::",
                stringify!(_x3x_basic_key)
            )
        );
    }
    test_field__x3x_basic_key();
}
extern "C" {
    #[link_name = "\u{1}?get_voice_num@pxtnWoice@@QEBAHXZ"]
    pub fn pxtnWoice_get_voice_num(this: *const pxtnWoice) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_x3x_tuning@pxtnWoice@@QEBAMXZ"]
    pub fn pxtnWoice_get_x3x_tuning(this: *const pxtnWoice) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?get_x3x_basic_key@pxtnWoice@@QEBAHXZ"]
    pub fn pxtnWoice_get_x3x_basic_key(this: *const pxtnWoice) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_type@pxtnWoice@@QEBA?AW4pxtnWOICETYPE@@XZ"]
    pub fn pxtnWoice_get_type(this: *const pxtnWoice) -> pxtnWOICETYPE;
}
extern "C" {
    #[link_name = "\u{1}?get_voice@pxtnWoice@@QEBAPEBUpxtnVOICEUNIT@@H@Z"]
    pub fn pxtnWoice_get_voice(this: *const pxtnWoice, idx: i32) -> *const pxtnVOICEUNIT;
}
extern "C" {
    #[link_name = "\u{1}?get_voice_variable@pxtnWoice@@QEAAPEAUpxtnVOICEUNIT@@H@Z"]
    pub fn pxtnWoice_get_voice_variable(this: *mut pxtnWoice, idx: i32) -> *mut pxtnVOICEUNIT;
}
extern "C" {
    #[link_name = "\u{1}?get_instance@pxtnWoice@@QEBAPEBUpxtnVOICEINSTANCE@@H@Z"]
    pub fn pxtnWoice_get_instance(this: *const pxtnWoice, idx: i32) -> *const pxtnVOICEINSTANCE;
}
extern "C" {
    #[link_name = "\u{1}?set_name_buf@pxtnWoice@@QEAA_NPEBDH@Z"]
    pub fn pxtnWoice_set_name_buf(
        this: *mut pxtnWoice,
        name_buf: *const ::std::os::raw::c_char,
        buf_size: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?get_name_buf@pxtnWoice@@QEBAPEBDPEAH@Z"]
    pub fn pxtnWoice_get_name_buf(
        this: *const pxtnWoice,
        p_buf_size: *mut i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?is_name_buf@pxtnWoice@@QEBA_NXZ"]
    pub fn pxtnWoice_is_name_buf(this: *const pxtnWoice) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Voice_Allocate@pxtnWoice@@QEAA_NH@Z"]
    pub fn pxtnWoice_Voice_Allocate(this: *mut pxtnWoice, voice_num: i32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Voice_Release@pxtnWoice@@QEAAXXZ"]
    pub fn pxtnWoice_Voice_Release(this: *mut pxtnWoice);
}
extern "C" {
    #[link_name = "\u{1}?Copy@pxtnWoice@@QEBA_NPEAV1@@Z"]
    pub fn pxtnWoice_Copy(this: *const pxtnWoice, p_dst: *mut pxtnWoice) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Slim@pxtnWoice@@QEAAXXZ"]
    pub fn pxtnWoice_Slim(this: *mut pxtnWoice);
}
extern "C" {
    #[link_name = "\u{1}?read@pxtnWoice@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@W4pxtnWOICETYPE@@@Z"]
    pub fn pxtnWoice_read(
        this: *mut pxtnWoice,
        desc: *mut pxtnDescriptor,
        type_: pxtnWOICETYPE,
    ) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?PTV_Write@pxtnWoice@@QEBA_NPEAVpxtnDescriptor@@PEAH@Z"]
    pub fn pxtnWoice_PTV_Write(
        this: *const pxtnWoice,
        p_doc: *mut pxtnDescriptor,
        p_total: *mut i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?PTV_Read@pxtnWoice@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@@Z"]
    pub fn pxtnWoice_PTV_Read(this: *mut pxtnWoice, p_doc: *mut pxtnDescriptor) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?io_matePCM_w@pxtnWoice@@QEBA_NPEAVpxtnDescriptor@@@Z"]
    pub fn pxtnWoice_io_matePCM_w(this: *const pxtnWoice, p_doc: *mut pxtnDescriptor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?io_matePCM_r@pxtnWoice@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@@Z"]
    pub fn pxtnWoice_io_matePCM_r(this: *mut pxtnWoice, p_doc: *mut pxtnDescriptor) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?io_matePTN_w@pxtnWoice@@QEBA_NPEAVpxtnDescriptor@@@Z"]
    pub fn pxtnWoice_io_matePTN_w(this: *const pxtnWoice, p_doc: *mut pxtnDescriptor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?io_matePTN_r@pxtnWoice@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@@Z"]
    pub fn pxtnWoice_io_matePTN_r(this: *mut pxtnWoice, p_doc: *mut pxtnDescriptor) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?io_matePTV_w@pxtnWoice@@QEBA_NPEAVpxtnDescriptor@@@Z"]
    pub fn pxtnWoice_io_matePTV_w(this: *const pxtnWoice, p_doc: *mut pxtnDescriptor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?io_matePTV_r@pxtnWoice@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@@Z"]
    pub fn pxtnWoice_io_matePTV_r(this: *mut pxtnWoice, p_doc: *mut pxtnDescriptor) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?io_mateOGGV_w@pxtnWoice@@QEBA_NPEAVpxtnDescriptor@@@Z"]
    pub fn pxtnWoice_io_mateOGGV_w(this: *const pxtnWoice, p_doc: *mut pxtnDescriptor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?io_mateOGGV_r@pxtnWoice@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@@Z"]
    pub fn pxtnWoice_io_mateOGGV_r(this: *mut pxtnWoice, p_doc: *mut pxtnDescriptor) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?Tone_Ready_sample@pxtnWoice@@QEAA?AW4pxtnERR@@PEBVpxtnPulse_NoiseBuilder@@@Z"]
    pub fn pxtnWoice_Tone_Ready_sample(
        this: *mut pxtnWoice,
        ptn_bldr: *const pxtnPulse_NoiseBuilder,
    ) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?Tone_Ready_envelope@pxtnWoice@@QEAA?AW4pxtnERR@@H@Z"]
    pub fn pxtnWoice_Tone_Ready_envelope(this: *mut pxtnWoice, sps: i32) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?Tone_Ready@pxtnWoice@@QEAA?AW4pxtnERR@@PEBVpxtnPulse_NoiseBuilder@@H@Z"]
    pub fn pxtnWoice_Tone_Ready(
        this: *mut pxtnWoice,
        ptn_bldr: *const pxtnPulse_NoiseBuilder,
        sps: i32,
    ) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}??0pxtnWoice@@QEAA@XZ"]
    pub fn pxtnWoice_pxtnWoice(this: *mut pxtnWoice);
}
extern "C" {
    #[link_name = "\u{1}??_DpxtnWoice@@QEAAXXZ"]
    pub fn pxtnWoice_pxtnWoice_destructor(this: *mut pxtnWoice);
}
impl pxtnWoice {
    #[inline]
    pub unsafe fn get_voice_num(&self) -> i32 {
        pxtnWoice_get_voice_num(self)
    }
    #[inline]
    pub unsafe fn get_x3x_tuning(&self) -> f32 {
        pxtnWoice_get_x3x_tuning(self)
    }
    #[inline]
    pub unsafe fn get_x3x_basic_key(&self) -> i32 {
        pxtnWoice_get_x3x_basic_key(self)
    }
    #[inline]
    pub unsafe fn get_type(&self) -> pxtnWOICETYPE {
        pxtnWoice_get_type(self)
    }
    #[inline]
    pub unsafe fn get_voice(&self, idx: i32) -> *const pxtnVOICEUNIT {
        pxtnWoice_get_voice(self, idx)
    }
    #[inline]
    pub unsafe fn get_voice_variable(&mut self, idx: i32) -> *mut pxtnVOICEUNIT {
        pxtnWoice_get_voice_variable(self, idx)
    }
    #[inline]
    pub unsafe fn get_instance(&self, idx: i32) -> *const pxtnVOICEINSTANCE {
        pxtnWoice_get_instance(self, idx)
    }
    #[inline]
    pub unsafe fn set_name_buf(
        &mut self,
        name_buf: *const ::std::os::raw::c_char,
        buf_size: i32,
    ) -> bool {
        pxtnWoice_set_name_buf(self, name_buf, buf_size)
    }
    #[inline]
    pub unsafe fn get_name_buf(&self, p_buf_size: *mut i32) -> *const ::std::os::raw::c_char {
        pxtnWoice_get_name_buf(self, p_buf_size)
    }
    #[inline]
    pub unsafe fn is_name_buf(&self) -> bool {
        pxtnWoice_is_name_buf(self)
    }
    #[inline]
    pub unsafe fn Voice_Allocate(&mut self, voice_num: i32) -> bool {
        pxtnWoice_Voice_Allocate(self, voice_num)
    }
    #[inline]
    pub unsafe fn Voice_Release(&mut self) {
        pxtnWoice_Voice_Release(self)
    }
    #[inline]
    pub unsafe fn Copy(&self, p_dst: *mut pxtnWoice) -> bool {
        pxtnWoice_Copy(self, p_dst)
    }
    #[inline]
    pub unsafe fn Slim(&mut self) {
        pxtnWoice_Slim(self)
    }
    #[inline]
    pub unsafe fn read(&mut self, desc: *mut pxtnDescriptor, type_: pxtnWOICETYPE) -> pxtnERR {
        pxtnWoice_read(self, desc, type_)
    }
    #[inline]
    pub unsafe fn PTV_Write(&self, p_doc: *mut pxtnDescriptor, p_total: *mut i32) -> bool {
        pxtnWoice_PTV_Write(self, p_doc, p_total)
    }
    #[inline]
    pub unsafe fn PTV_Read(&mut self, p_doc: *mut pxtnDescriptor) -> pxtnERR {
        pxtnWoice_PTV_Read(self, p_doc)
    }
    #[inline]
    pub unsafe fn io_matePCM_w(&self, p_doc: *mut pxtnDescriptor) -> bool {
        pxtnWoice_io_matePCM_w(self, p_doc)
    }
    #[inline]
    pub unsafe fn io_matePCM_r(&mut self, p_doc: *mut pxtnDescriptor) -> pxtnERR {
        pxtnWoice_io_matePCM_r(self, p_doc)
    }
    #[inline]
    pub unsafe fn io_matePTN_w(&self, p_doc: *mut pxtnDescriptor) -> bool {
        pxtnWoice_io_matePTN_w(self, p_doc)
    }
    #[inline]
    pub unsafe fn io_matePTN_r(&mut self, p_doc: *mut pxtnDescriptor) -> pxtnERR {
        pxtnWoice_io_matePTN_r(self, p_doc)
    }
    #[inline]
    pub unsafe fn io_matePTV_w(&self, p_doc: *mut pxtnDescriptor) -> bool {
        pxtnWoice_io_matePTV_w(self, p_doc)
    }
    #[inline]
    pub unsafe fn io_matePTV_r(&mut self, p_doc: *mut pxtnDescriptor) -> pxtnERR {
        pxtnWoice_io_matePTV_r(self, p_doc)
    }
    #[inline]
    pub unsafe fn io_mateOGGV_w(&self, p_doc: *mut pxtnDescriptor) -> bool {
        pxtnWoice_io_mateOGGV_w(self, p_doc)
    }
    #[inline]
    pub unsafe fn io_mateOGGV_r(&mut self, p_doc: *mut pxtnDescriptor) -> pxtnERR {
        pxtnWoice_io_mateOGGV_r(self, p_doc)
    }
    #[inline]
    pub unsafe fn Tone_Ready_sample(&mut self, ptn_bldr: *const pxtnPulse_NoiseBuilder) -> pxtnERR {
        pxtnWoice_Tone_Ready_sample(self, ptn_bldr)
    }
    #[inline]
    pub unsafe fn Tone_Ready_envelope(&mut self, sps: i32) -> pxtnERR {
        pxtnWoice_Tone_Ready_envelope(self, sps)
    }
    #[inline]
    pub unsafe fn Tone_Ready(
        &mut self,
        ptn_bldr: *const pxtnPulse_NoiseBuilder,
        sps: i32,
    ) -> pxtnERR {
        pxtnWoice_Tone_Ready(self, ptn_bldr, sps)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        pxtnWoice_pxtnWoice(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        pxtnWoice_pxtnWoice_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct pxtnUnit {
    pub _bOperated: bool,
    pub _bPlayed: bool,
    pub _name_buf: [::std::os::raw::c_char; 17usize],
    pub _name_size: i32,
    pub _key_now: i32,
    pub _key_start: i32,
    pub _key_margin: i32,
    pub _portament_sample_pos: i32,
    pub _portament_sample_num: i32,
    pub _pan_vols: [i32; 2usize],
    pub _pan_times: [i32; 2usize],
    pub _pan_time_bufs: [[i32; 64usize]; 2usize],
    pub _v_VOLUME: i32,
    pub _v_VELOCITY: i32,
    pub _v_GROUPNO: i32,
    pub _v_TUNING: f32,
    pub _p_woice: *const pxtnWoice,
    pub _vts: [pxtnVOICETONE; 2usize],
}
#[test]
fn bindgen_test_layout_pxtnUnit() {
    assert_eq!(
        ::std::mem::size_of::<pxtnUnit>(),
        696usize,
        concat!("Size of: ", stringify!(pxtnUnit))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnUnit>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnUnit))
    );
    fn test_field__bOperated() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._bOperated) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_bOperated)
            )
        );
    }
    test_field__bOperated();
    fn test_field__bPlayed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._bPlayed) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_bPlayed)
            )
        );
    }
    test_field__bPlayed();
    fn test_field__name_buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._name_buf) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_name_buf)
            )
        );
    }
    test_field__name_buf();
    fn test_field__name_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._name_size) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_name_size)
            )
        );
    }
    test_field__name_size();
    fn test_field__key_now() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._key_now) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_key_now)
            )
        );
    }
    test_field__key_now();
    fn test_field__key_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._key_start) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_key_start)
            )
        );
    }
    test_field__key_start();
    fn test_field__key_margin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._key_margin) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_key_margin)
            )
        );
    }
    test_field__key_margin();
    fn test_field__portament_sample_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._portament_sample_pos) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_portament_sample_pos)
            )
        );
    }
    test_field__portament_sample_pos();
    fn test_field__portament_sample_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._portament_sample_num) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_portament_sample_num)
            )
        );
    }
    test_field__portament_sample_num();
    fn test_field__pan_vols() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._pan_vols) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_pan_vols)
            )
        );
    }
    test_field__pan_vols();
    fn test_field__pan_times() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._pan_times) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_pan_times)
            )
        );
    }
    test_field__pan_times();
    fn test_field__pan_time_bufs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._pan_time_bufs) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_pan_time_bufs)
            )
        );
    }
    test_field__pan_time_bufs();
    fn test_field__v_VOLUME() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._v_VOLUME) as usize - ptr as usize
            },
            572usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_v_VOLUME)
            )
        );
    }
    test_field__v_VOLUME();
    fn test_field__v_VELOCITY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._v_VELOCITY) as usize - ptr as usize
            },
            576usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_v_VELOCITY)
            )
        );
    }
    test_field__v_VELOCITY();
    fn test_field__v_GROUPNO() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._v_GROUPNO) as usize - ptr as usize
            },
            580usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_v_GROUPNO)
            )
        );
    }
    test_field__v_GROUPNO();
    fn test_field__v_TUNING() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._v_TUNING) as usize - ptr as usize
            },
            584usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_v_TUNING)
            )
        );
    }
    test_field__v_TUNING();
    fn test_field__p_woice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._p_woice) as usize - ptr as usize
            },
            592usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_p_woice)
            )
        );
    }
    test_field__p_woice();
    fn test_field__vts() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnUnit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._vts) as usize - ptr as usize
            },
            600usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnUnit),
                "::",
                stringify!(_vts)
            )
        );
    }
    test_field__vts();
}
extern "C" {
    #[link_name = "\u{1}?Tone_Init@pxtnUnit@@QEAAXXZ"]
    pub fn pxtnUnit_Tone_Init(this: *mut pxtnUnit);
}
extern "C" {
    #[link_name = "\u{1}?Tone_Clear@pxtnUnit@@QEAAXXZ"]
    pub fn pxtnUnit_Tone_Clear(this: *mut pxtnUnit);
}
extern "C" {
    #[link_name = "\u{1}?Tone_Reset_and_2prm@pxtnUnit@@QEAAXHHM@Z"]
    pub fn pxtnUnit_Tone_Reset_and_2prm(
        this: *mut pxtnUnit,
        voice_idx: i32,
        env_rls_clock: i32,
        offset_freq: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?Tone_Envelope@pxtnUnit@@QEAAXXZ"]
    pub fn pxtnUnit_Tone_Envelope(this: *mut pxtnUnit);
}
extern "C" {
    #[link_name = "\u{1}?Tone_KeyOn@pxtnUnit@@QEAAXXZ"]
    pub fn pxtnUnit_Tone_KeyOn(this: *mut pxtnUnit);
}
extern "C" {
    #[link_name = "\u{1}?Tone_ZeroLives@pxtnUnit@@QEAAXXZ"]
    pub fn pxtnUnit_Tone_ZeroLives(this: *mut pxtnUnit);
}
extern "C" {
    #[link_name = "\u{1}?Tone_Key@pxtnUnit@@QEAAXH@Z"]
    pub fn pxtnUnit_Tone_Key(this: *mut pxtnUnit, key: i32);
}
extern "C" {
    #[link_name = "\u{1}?Tone_Pan_Volume@pxtnUnit@@QEAAXHH@Z"]
    pub fn pxtnUnit_Tone_Pan_Volume(this: *mut pxtnUnit, ch: i32, pan: i32);
}
extern "C" {
    #[link_name = "\u{1}?Tone_Pan_Time@pxtnUnit@@QEAAXHHH@Z"]
    pub fn pxtnUnit_Tone_Pan_Time(this: *mut pxtnUnit, ch: i32, pan: i32, sps: i32);
}
extern "C" {
    #[link_name = "\u{1}?Tone_Velocity@pxtnUnit@@QEAAXH@Z"]
    pub fn pxtnUnit_Tone_Velocity(this: *mut pxtnUnit, val: i32);
}
extern "C" {
    #[link_name = "\u{1}?Tone_Volume@pxtnUnit@@QEAAXH@Z"]
    pub fn pxtnUnit_Tone_Volume(this: *mut pxtnUnit, val: i32);
}
extern "C" {
    #[link_name = "\u{1}?Tone_Portament@pxtnUnit@@QEAAXH@Z"]
    pub fn pxtnUnit_Tone_Portament(this: *mut pxtnUnit, val: i32);
}
extern "C" {
    #[link_name = "\u{1}?Tone_GroupNo@pxtnUnit@@QEAAXH@Z"]
    pub fn pxtnUnit_Tone_GroupNo(this: *mut pxtnUnit, val: i32);
}
extern "C" {
    #[link_name = "\u{1}?Tone_Tuning@pxtnUnit@@QEAAXM@Z"]
    pub fn pxtnUnit_Tone_Tuning(this: *mut pxtnUnit, val: f32);
}
extern "C" {
    #[link_name = "\u{1}?Tone_Sample@pxtnUnit@@QEAAX_NHHH@Z"]
    pub fn pxtnUnit_Tone_Sample(
        this: *mut pxtnUnit,
        b_mute_by_unit: bool,
        ch_num: i32,
        time_pan_index: i32,
        smooth_smp: i32,
    );
}
extern "C" {
    #[link_name = "\u{1}?Tone_Supple@pxtnUnit@@QEBAXPEAHHH@Z"]
    pub fn pxtnUnit_Tone_Supple(
        this: *const pxtnUnit,
        group_smps: *mut i32,
        ch_num: i32,
        time_pan_index: i32,
    );
}
extern "C" {
    #[link_name = "\u{1}?Tone_Increment_Key@pxtnUnit@@QEAAHXZ"]
    pub fn pxtnUnit_Tone_Increment_Key(this: *mut pxtnUnit) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Tone_Increment_Sample@pxtnUnit@@QEAAXM@Z"]
    pub fn pxtnUnit_Tone_Increment_Sample(this: *mut pxtnUnit, freq: f32);
}
extern "C" {
    #[link_name = "\u{1}?set_woice@pxtnUnit@@QEAA_NPEBVpxtnWoice@@@Z"]
    pub fn pxtnUnit_set_woice(this: *mut pxtnUnit, p_woice: *const pxtnWoice) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?get_woice@pxtnUnit@@QEBAPEBVpxtnWoice@@XZ"]
    pub fn pxtnUnit_get_woice(this: *const pxtnUnit) -> *const pxtnWoice;
}
extern "C" {
    #[link_name = "\u{1}?set_name_buf@pxtnUnit@@QEAA_NPEBDH@Z"]
    pub fn pxtnUnit_set_name_buf(
        this: *mut pxtnUnit,
        name_buf: *const ::std::os::raw::c_char,
        buf_size: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?get_name_buf@pxtnUnit@@QEBAPEBDPEAH@Z"]
    pub fn pxtnUnit_get_name_buf(
        this: *const pxtnUnit,
        p_buf_size: *mut i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?is_name_buf@pxtnUnit@@QEBA_NXZ"]
    pub fn pxtnUnit_is_name_buf(this: *const pxtnUnit) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?get_tone@pxtnUnit@@QEAAPEAUpxtnVOICETONE@@H@Z"]
    pub fn pxtnUnit_get_tone(this: *mut pxtnUnit, voice_idx: i32) -> *mut pxtnVOICETONE;
}
extern "C" {
    #[link_name = "\u{1}?set_operated@pxtnUnit@@QEAAX_N@Z"]
    pub fn pxtnUnit_set_operated(this: *mut pxtnUnit, b: bool);
}
extern "C" {
    #[link_name = "\u{1}?set_played@pxtnUnit@@QEAAX_N@Z"]
    pub fn pxtnUnit_set_played(this: *mut pxtnUnit, b: bool);
}
extern "C" {
    #[link_name = "\u{1}?get_operated@pxtnUnit@@QEBA_NXZ"]
    pub fn pxtnUnit_get_operated(this: *const pxtnUnit) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?get_played@pxtnUnit@@QEBA_NXZ"]
    pub fn pxtnUnit_get_played(this: *const pxtnUnit) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Read_v3x@pxtnUnit@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@PEAH@Z"]
    pub fn pxtnUnit_Read_v3x(
        this: *mut pxtnUnit,
        p_doc: *mut pxtnDescriptor,
        p_group: *mut i32,
    ) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?Read_v1x@pxtnUnit@@QEAA_NPEAVpxtnDescriptor@@PEAH@Z"]
    pub fn pxtnUnit_Read_v1x(
        this: *mut pxtnUnit,
        p_doc: *mut pxtnDescriptor,
        p_group: *mut i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}??0pxtnUnit@@QEAA@XZ"]
    pub fn pxtnUnit_pxtnUnit(this: *mut pxtnUnit);
}
extern "C" {
    #[link_name = "\u{1}??_DpxtnUnit@@QEAAXXZ"]
    pub fn pxtnUnit_pxtnUnit_destructor(this: *mut pxtnUnit);
}
impl pxtnUnit {
    #[inline]
    pub unsafe fn Tone_Init(&mut self) {
        pxtnUnit_Tone_Init(self)
    }
    #[inline]
    pub unsafe fn Tone_Clear(&mut self) {
        pxtnUnit_Tone_Clear(self)
    }
    #[inline]
    pub unsafe fn Tone_Reset_and_2prm(
        &mut self,
        voice_idx: i32,
        env_rls_clock: i32,
        offset_freq: f32,
    ) {
        pxtnUnit_Tone_Reset_and_2prm(self, voice_idx, env_rls_clock, offset_freq)
    }
    #[inline]
    pub unsafe fn Tone_Envelope(&mut self) {
        pxtnUnit_Tone_Envelope(self)
    }
    #[inline]
    pub unsafe fn Tone_KeyOn(&mut self) {
        pxtnUnit_Tone_KeyOn(self)
    }
    #[inline]
    pub unsafe fn Tone_ZeroLives(&mut self) {
        pxtnUnit_Tone_ZeroLives(self)
    }
    #[inline]
    pub unsafe fn Tone_Key(&mut self, key: i32) {
        pxtnUnit_Tone_Key(self, key)
    }
    #[inline]
    pub unsafe fn Tone_Pan_Volume(&mut self, ch: i32, pan: i32) {
        pxtnUnit_Tone_Pan_Volume(self, ch, pan)
    }
    #[inline]
    pub unsafe fn Tone_Pan_Time(&mut self, ch: i32, pan: i32, sps: i32) {
        pxtnUnit_Tone_Pan_Time(self, ch, pan, sps)
    }
    #[inline]
    pub unsafe fn Tone_Velocity(&mut self, val: i32) {
        pxtnUnit_Tone_Velocity(self, val)
    }
    #[inline]
    pub unsafe fn Tone_Volume(&mut self, val: i32) {
        pxtnUnit_Tone_Volume(self, val)
    }
    #[inline]
    pub unsafe fn Tone_Portament(&mut self, val: i32) {
        pxtnUnit_Tone_Portament(self, val)
    }
    #[inline]
    pub unsafe fn Tone_GroupNo(&mut self, val: i32) {
        pxtnUnit_Tone_GroupNo(self, val)
    }
    #[inline]
    pub unsafe fn Tone_Tuning(&mut self, val: f32) {
        pxtnUnit_Tone_Tuning(self, val)
    }
    #[inline]
    pub unsafe fn Tone_Sample(
        &mut self,
        b_mute_by_unit: bool,
        ch_num: i32,
        time_pan_index: i32,
        smooth_smp: i32,
    ) {
        pxtnUnit_Tone_Sample(self, b_mute_by_unit, ch_num, time_pan_index, smooth_smp)
    }
    #[inline]
    pub unsafe fn Tone_Supple(&self, group_smps: *mut i32, ch_num: i32, time_pan_index: i32) {
        pxtnUnit_Tone_Supple(self, group_smps, ch_num, time_pan_index)
    }
    #[inline]
    pub unsafe fn Tone_Increment_Key(&mut self) -> i32 {
        pxtnUnit_Tone_Increment_Key(self)
    }
    #[inline]
    pub unsafe fn Tone_Increment_Sample(&mut self, freq: f32) {
        pxtnUnit_Tone_Increment_Sample(self, freq)
    }
    #[inline]
    pub unsafe fn set_woice(&mut self, p_woice: *const pxtnWoice) -> bool {
        pxtnUnit_set_woice(self, p_woice)
    }
    #[inline]
    pub unsafe fn get_woice(&self) -> *const pxtnWoice {
        pxtnUnit_get_woice(self)
    }
    #[inline]
    pub unsafe fn set_name_buf(
        &mut self,
        name_buf: *const ::std::os::raw::c_char,
        buf_size: i32,
    ) -> bool {
        pxtnUnit_set_name_buf(self, name_buf, buf_size)
    }
    #[inline]
    pub unsafe fn get_name_buf(&self, p_buf_size: *mut i32) -> *const ::std::os::raw::c_char {
        pxtnUnit_get_name_buf(self, p_buf_size)
    }
    #[inline]
    pub unsafe fn is_name_buf(&self) -> bool {
        pxtnUnit_is_name_buf(self)
    }
    #[inline]
    pub unsafe fn get_tone(&mut self, voice_idx: i32) -> *mut pxtnVOICETONE {
        pxtnUnit_get_tone(self, voice_idx)
    }
    #[inline]
    pub unsafe fn set_operated(&mut self, b: bool) {
        pxtnUnit_set_operated(self, b)
    }
    #[inline]
    pub unsafe fn set_played(&mut self, b: bool) {
        pxtnUnit_set_played(self, b)
    }
    #[inline]
    pub unsafe fn get_operated(&self) -> bool {
        pxtnUnit_get_operated(self)
    }
    #[inline]
    pub unsafe fn get_played(&self) -> bool {
        pxtnUnit_get_played(self)
    }
    #[inline]
    pub unsafe fn Read_v3x(&mut self, p_doc: *mut pxtnDescriptor, p_group: *mut i32) -> pxtnERR {
        pxtnUnit_Read_v3x(self, p_doc, p_group)
    }
    #[inline]
    pub unsafe fn Read_v1x(&mut self, p_doc: *mut pxtnDescriptor, p_group: *mut i32) -> bool {
        pxtnUnit_Read_v1x(self, p_doc, p_group)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        pxtnUnit_pxtnUnit(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        pxtnUnit_pxtnUnit_destructor(self)
    }
}
pub const EVENTKIND_NULL: _bindgen_ty_1 = 0;
pub const EVENTKIND_ON: _bindgen_ty_1 = 1;
pub const EVENTKIND_KEY: _bindgen_ty_1 = 2;
pub const EVENTKIND_PAN_VOLUME: _bindgen_ty_1 = 3;
pub const EVENTKIND_VELOCITY: _bindgen_ty_1 = 4;
pub const EVENTKIND_VOLUME: _bindgen_ty_1 = 5;
pub const EVENTKIND_PORTAMENT: _bindgen_ty_1 = 6;
pub const EVENTKIND_BEATCLOCK: _bindgen_ty_1 = 7;
pub const EVENTKIND_BEATTEMPO: _bindgen_ty_1 = 8;
pub const EVENTKIND_BEATNUM: _bindgen_ty_1 = 9;
pub const EVENTKIND_REPEAT: _bindgen_ty_1 = 10;
pub const EVENTKIND_LAST: _bindgen_ty_1 = 11;
pub const EVENTKIND_VOICENO: _bindgen_ty_1 = 12;
pub const EVENTKIND_GROUPNO: _bindgen_ty_1 = 13;
pub const EVENTKIND_TUNING: _bindgen_ty_1 = 14;
pub const EVENTKIND_PAN_TIME: _bindgen_ty_1 = 15;
pub const EVENTKIND_NUM: _bindgen_ty_1 = 16;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EVERECORD {
    pub kind: u8,
    pub unit_no: u8,
    pub reserve1: u8,
    pub reserve2: u8,
    pub value: i32,
    pub clock: i32,
    pub prev: *mut EVERECORD,
    pub next: *mut EVERECORD,
}
#[test]
fn bindgen_test_layout_EVERECORD() {
    assert_eq!(
        ::std::mem::size_of::<EVERECORD>(),
        32usize,
        concat!("Size of: ", stringify!(EVERECORD))
    );
    assert_eq!(
        ::std::mem::align_of::<EVERECORD>(),
        8usize,
        concat!("Alignment of ", stringify!(EVERECORD))
    );
    fn test_field_kind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<EVERECORD>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(EVERECORD),
                "::",
                stringify!(kind)
            )
        );
    }
    test_field_kind();
    fn test_field_unit_no() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<EVERECORD>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unit_no) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(EVERECORD),
                "::",
                stringify!(unit_no)
            )
        );
    }
    test_field_unit_no();
    fn test_field_reserve1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<EVERECORD>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(EVERECORD),
                "::",
                stringify!(reserve1)
            )
        );
    }
    test_field_reserve1();
    fn test_field_reserve2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<EVERECORD>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(EVERECORD),
                "::",
                stringify!(reserve2)
            )
        );
    }
    test_field_reserve2();
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<EVERECORD>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(EVERECORD),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
    fn test_field_clock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<EVERECORD>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).clock) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(EVERECORD),
                "::",
                stringify!(clock)
            )
        );
    }
    test_field_clock();
    fn test_field_prev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<EVERECORD>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(EVERECORD),
                "::",
                stringify!(prev)
            )
        );
    }
    test_field_prev();
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<EVERECORD>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(EVERECORD),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
}
#[repr(C)]
#[derive(Debug)]
pub struct pxtnEvelist {
    pub _eve_allocated_num: i32,
    pub _eves: *mut EVERECORD,
    pub _start: *mut EVERECORD,
    pub _linear: i32,
    pub _p_x4x_rec: *mut EVERECORD,
}
#[test]
fn bindgen_test_layout_pxtnEvelist() {
    assert_eq!(
        ::std::mem::size_of::<pxtnEvelist>(),
        40usize,
        concat!("Size of: ", stringify!(pxtnEvelist))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnEvelist>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnEvelist))
    );
    fn test_field__eve_allocated_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnEvelist>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._eve_allocated_num) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnEvelist),
                "::",
                stringify!(_eve_allocated_num)
            )
        );
    }
    test_field__eve_allocated_num();
    fn test_field__eves() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnEvelist>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._eves) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnEvelist),
                "::",
                stringify!(_eves)
            )
        );
    }
    test_field__eves();
    fn test_field__start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnEvelist>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._start) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnEvelist),
                "::",
                stringify!(_start)
            )
        );
    }
    test_field__start();
    fn test_field__linear() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnEvelist>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._linear) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnEvelist),
                "::",
                stringify!(_linear)
            )
        );
    }
    test_field__linear();
    fn test_field__p_x4x_rec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnEvelist>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._p_x4x_rec) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnEvelist),
                "::",
                stringify!(_p_x4x_rec)
            )
        );
    }
    test_field__p_x4x_rec();
}
extern "C" {
    #[link_name = "\u{1}?Release@pxtnEvelist@@QEAAXXZ"]
    pub fn pxtnEvelist_Release(this: *mut pxtnEvelist);
}
extern "C" {
    #[link_name = "\u{1}?Clear@pxtnEvelist@@QEAAXXZ"]
    pub fn pxtnEvelist_Clear(this: *mut pxtnEvelist);
}
extern "C" {
    #[link_name = "\u{1}?Allocate@pxtnEvelist@@QEAA_NH@Z"]
    pub fn pxtnEvelist_Allocate(this: *mut pxtnEvelist, max_event_num: i32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?get_Num_Max@pxtnEvelist@@QEBAHXZ"]
    pub fn pxtnEvelist_get_Num_Max(this: *const pxtnEvelist) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_Max_Clock@pxtnEvelist@@QEBAHXZ"]
    pub fn pxtnEvelist_get_Max_Clock(this: *const pxtnEvelist) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_Count@pxtnEvelist@@QEBAHXZ"]
    pub fn pxtnEvelist_get_Count(this: *const pxtnEvelist) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_Count@pxtnEvelist@@QEBAHEH@Z"]
    pub fn pxtnEvelist_get_Count1(this: *const pxtnEvelist, kind: u8, value: i32) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_Count@pxtnEvelist@@QEBAHE@Z"]
    pub fn pxtnEvelist_get_Count2(this: *const pxtnEvelist, unit_no: u8) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_Count@pxtnEvelist@@QEBAHEE@Z"]
    pub fn pxtnEvelist_get_Count3(this: *const pxtnEvelist, unit_no: u8, kind: u8) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_Count@pxtnEvelist@@QEBAHHHE@Z"]
    pub fn pxtnEvelist_get_Count4(
        this: *const pxtnEvelist,
        clock1: i32,
        clock2: i32,
        unit_no: u8,
    ) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_Value@pxtnEvelist@@QEBAHHEE@Z"]
    pub fn pxtnEvelist_get_Value(
        this: *const pxtnEvelist,
        clock: i32,
        unit_no: u8,
        kind: u8,
    ) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?get_Records@pxtnEvelist@@QEBAPEBUEVERECORD@@XZ"]
    pub fn pxtnEvelist_get_Records(this: *const pxtnEvelist) -> *const EVERECORD;
}
extern "C" {
    #[link_name = "\u{1}?Record_Add_i@pxtnEvelist@@QEAA_NHEEH@Z"]
    pub fn pxtnEvelist_Record_Add_i(
        this: *mut pxtnEvelist,
        clock: i32,
        unit_no: u8,
        kind: u8,
        value: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Record_Add_f@pxtnEvelist@@QEAA_NHEEM@Z"]
    pub fn pxtnEvelist_Record_Add_f(
        this: *mut pxtnEvelist,
        clock: i32,
        unit_no: u8,
        kind: u8,
        value_f: f32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Linear_Start@pxtnEvelist@@QEAA_NXZ"]
    pub fn pxtnEvelist_Linear_Start(this: *mut pxtnEvelist) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Linear_Add_i@pxtnEvelist@@QEAAXHEEH@Z"]
    pub fn pxtnEvelist_Linear_Add_i(
        this: *mut pxtnEvelist,
        clock: i32,
        unit_no: u8,
        kind: u8,
        value: i32,
    );
}
extern "C" {
    #[link_name = "\u{1}?Linear_Add_f@pxtnEvelist@@QEAAXHEEM@Z"]
    pub fn pxtnEvelist_Linear_Add_f(
        this: *mut pxtnEvelist,
        clock: i32,
        unit_no: u8,
        kind: u8,
        value_f: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?Linear_End@pxtnEvelist@@QEAAX_N@Z"]
    pub fn pxtnEvelist_Linear_End(this: *mut pxtnEvelist, b_connect: bool);
}
extern "C" {
    #[link_name = "\u{1}?Record_Clock_Shift@pxtnEvelist@@QEAAHHHE@Z"]
    pub fn pxtnEvelist_Record_Clock_Shift(
        this: *mut pxtnEvelist,
        clock: i32,
        shift: i32,
        unit_no: u8,
    ) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Record_Value_Set@pxtnEvelist@@QEAAHHHEEH@Z"]
    pub fn pxtnEvelist_Record_Value_Set(
        this: *mut pxtnEvelist,
        clock1: i32,
        clock2: i32,
        unit_no: u8,
        kind: u8,
        value: i32,
    ) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Record_Value_Change@pxtnEvelist@@QEAAHHHEEH@Z"]
    pub fn pxtnEvelist_Record_Value_Change(
        this: *mut pxtnEvelist,
        clock1: i32,
        clock2: i32,
        unit_no: u8,
        kind: u8,
        value: i32,
    ) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Record_Value_Omit@pxtnEvelist@@QEAAHEH@Z"]
    pub fn pxtnEvelist_Record_Value_Omit(this: *mut pxtnEvelist, kind: u8, value: i32) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Record_Value_Replace@pxtnEvelist@@QEAAHEHH@Z"]
    pub fn pxtnEvelist_Record_Value_Replace(
        this: *mut pxtnEvelist,
        kind: u8,
        old_value: i32,
        new_value: i32,
    ) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Record_Delete@pxtnEvelist@@QEAAHHHEE@Z"]
    pub fn pxtnEvelist_Record_Delete(
        this: *mut pxtnEvelist,
        clock1: i32,
        clock2: i32,
        unit_no: u8,
        kind: u8,
    ) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Record_Delete@pxtnEvelist@@QEAAHHHE@Z"]
    pub fn pxtnEvelist_Record_Delete1(
        this: *mut pxtnEvelist,
        clock1: i32,
        clock2: i32,
        unit_no: u8,
    ) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Record_UnitNo_Miss@pxtnEvelist@@QEAAHE@Z"]
    pub fn pxtnEvelist_Record_UnitNo_Miss(this: *mut pxtnEvelist, unit_no: u8) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Record_UnitNo_Set@pxtnEvelist@@QEAAHE@Z"]
    pub fn pxtnEvelist_Record_UnitNo_Set(this: *mut pxtnEvelist, unit_no: u8) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Record_UnitNo_Replace@pxtnEvelist@@QEAAHEE@Z"]
    pub fn pxtnEvelist_Record_UnitNo_Replace(this: *mut pxtnEvelist, old_u: u8, new_u: u8) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?BeatClockOperation@pxtnEvelist@@QEAAHH@Z"]
    pub fn pxtnEvelist_BeatClockOperation(this: *mut pxtnEvelist, rate: i32) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?io_Write@pxtnEvelist@@QEBA_NPEAVpxtnDescriptor@@H@Z"]
    pub fn pxtnEvelist_io_Write(
        this: *const pxtnEvelist,
        p_doc: *mut pxtnDescriptor,
        rough: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?io_Read@pxtnEvelist@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@@Z"]
    pub fn pxtnEvelist_io_Read(this: *mut pxtnEvelist, p_doc: *mut pxtnDescriptor) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?io_Read_EventNum@pxtnEvelist@@QEBAHPEAVpxtnDescriptor@@@Z"]
    pub fn pxtnEvelist_io_Read_EventNum(
        this: *const pxtnEvelist,
        p_doc: *mut pxtnDescriptor,
    ) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?x4x_Read_Start@pxtnEvelist@@QEAA_NXZ"]
    pub fn pxtnEvelist_x4x_Read_Start(this: *mut pxtnEvelist) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?x4x_Read_NewKind@pxtnEvelist@@QEAAXXZ"]
    pub fn pxtnEvelist_x4x_Read_NewKind(this: *mut pxtnEvelist);
}
extern "C" {
    #[link_name = "\u{1}?x4x_Read_Add@pxtnEvelist@@QEAAXHEEH@Z"]
    pub fn pxtnEvelist_x4x_Read_Add(
        this: *mut pxtnEvelist,
        clock: i32,
        unit_no: u8,
        kind: u8,
        value: i32,
    );
}
extern "C" {
    #[link_name = "\u{1}?io_Unit_Read_x4x_EVENT@pxtnEvelist@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@_N1@Z"]
    pub fn pxtnEvelist_io_Unit_Read_x4x_EVENT(
        this: *mut pxtnEvelist,
        p_doc: *mut pxtnDescriptor,
        bTailAbsolute: bool,
        bCheckRRR: bool,
    ) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?io_Read_x4x_EventNum@pxtnEvelist@@QEBA?AW4pxtnERR@@PEAVpxtnDescriptor@@PEAH@Z"]
    pub fn pxtnEvelist_io_Read_x4x_EventNum(
        this: *const pxtnEvelist,
        p_doc: *mut pxtnDescriptor,
        p_num: *mut i32,
    ) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}??0pxtnEvelist@@QEAA@XZ"]
    pub fn pxtnEvelist_pxtnEvelist(this: *mut pxtnEvelist);
}
extern "C" {
    #[link_name = "\u{1}??_DpxtnEvelist@@QEAAXXZ"]
    pub fn pxtnEvelist_pxtnEvelist_destructor(this: *mut pxtnEvelist);
}
impl pxtnEvelist {
    #[inline]
    pub unsafe fn Release(&mut self) {
        pxtnEvelist_Release(self)
    }
    #[inline]
    pub unsafe fn Clear(&mut self) {
        pxtnEvelist_Clear(self)
    }
    #[inline]
    pub unsafe fn Allocate(&mut self, max_event_num: i32) -> bool {
        pxtnEvelist_Allocate(self, max_event_num)
    }
    #[inline]
    pub unsafe fn get_Num_Max(&self) -> i32 {
        pxtnEvelist_get_Num_Max(self)
    }
    #[inline]
    pub unsafe fn get_Max_Clock(&self) -> i32 {
        pxtnEvelist_get_Max_Clock(self)
    }
    #[inline]
    pub unsafe fn get_Count(&self) -> i32 {
        pxtnEvelist_get_Count(self)
    }
    #[inline]
    pub unsafe fn get_Count1(&self, kind: u8, value: i32) -> i32 {
        pxtnEvelist_get_Count1(self, kind, value)
    }
    #[inline]
    pub unsafe fn get_Count2(&self, unit_no: u8) -> i32 {
        pxtnEvelist_get_Count2(self, unit_no)
    }
    #[inline]
    pub unsafe fn get_Count3(&self, unit_no: u8, kind: u8) -> i32 {
        pxtnEvelist_get_Count3(self, unit_no, kind)
    }
    #[inline]
    pub unsafe fn get_Count4(&self, clock1: i32, clock2: i32, unit_no: u8) -> i32 {
        pxtnEvelist_get_Count4(self, clock1, clock2, unit_no)
    }
    #[inline]
    pub unsafe fn get_Value(&self, clock: i32, unit_no: u8, kind: u8) -> i32 {
        pxtnEvelist_get_Value(self, clock, unit_no, kind)
    }
    #[inline]
    pub unsafe fn get_Records(&self) -> *const EVERECORD {
        pxtnEvelist_get_Records(self)
    }
    #[inline]
    pub unsafe fn Record_Add_i(&mut self, clock: i32, unit_no: u8, kind: u8, value: i32) -> bool {
        pxtnEvelist_Record_Add_i(self, clock, unit_no, kind, value)
    }
    #[inline]
    pub unsafe fn Record_Add_f(&mut self, clock: i32, unit_no: u8, kind: u8, value_f: f32) -> bool {
        pxtnEvelist_Record_Add_f(self, clock, unit_no, kind, value_f)
    }
    #[inline]
    pub unsafe fn Linear_Start(&mut self) -> bool {
        pxtnEvelist_Linear_Start(self)
    }
    #[inline]
    pub unsafe fn Linear_Add_i(&mut self, clock: i32, unit_no: u8, kind: u8, value: i32) {
        pxtnEvelist_Linear_Add_i(self, clock, unit_no, kind, value)
    }
    #[inline]
    pub unsafe fn Linear_Add_f(&mut self, clock: i32, unit_no: u8, kind: u8, value_f: f32) {
        pxtnEvelist_Linear_Add_f(self, clock, unit_no, kind, value_f)
    }
    #[inline]
    pub unsafe fn Linear_End(&mut self, b_connect: bool) {
        pxtnEvelist_Linear_End(self, b_connect)
    }
    #[inline]
    pub unsafe fn Record_Clock_Shift(&mut self, clock: i32, shift: i32, unit_no: u8) -> i32 {
        pxtnEvelist_Record_Clock_Shift(self, clock, shift, unit_no)
    }
    #[inline]
    pub unsafe fn Record_Value_Set(
        &mut self,
        clock1: i32,
        clock2: i32,
        unit_no: u8,
        kind: u8,
        value: i32,
    ) -> i32 {
        pxtnEvelist_Record_Value_Set(self, clock1, clock2, unit_no, kind, value)
    }
    #[inline]
    pub unsafe fn Record_Value_Change(
        &mut self,
        clock1: i32,
        clock2: i32,
        unit_no: u8,
        kind: u8,
        value: i32,
    ) -> i32 {
        pxtnEvelist_Record_Value_Change(self, clock1, clock2, unit_no, kind, value)
    }
    #[inline]
    pub unsafe fn Record_Value_Omit(&mut self, kind: u8, value: i32) -> i32 {
        pxtnEvelist_Record_Value_Omit(self, kind, value)
    }
    #[inline]
    pub unsafe fn Record_Value_Replace(&mut self, kind: u8, old_value: i32, new_value: i32) -> i32 {
        pxtnEvelist_Record_Value_Replace(self, kind, old_value, new_value)
    }
    #[inline]
    pub unsafe fn Record_Delete(&mut self, clock1: i32, clock2: i32, unit_no: u8, kind: u8) -> i32 {
        pxtnEvelist_Record_Delete(self, clock1, clock2, unit_no, kind)
    }
    #[inline]
    pub unsafe fn Record_Delete1(&mut self, clock1: i32, clock2: i32, unit_no: u8) -> i32 {
        pxtnEvelist_Record_Delete1(self, clock1, clock2, unit_no)
    }
    #[inline]
    pub unsafe fn Record_UnitNo_Miss(&mut self, unit_no: u8) -> i32 {
        pxtnEvelist_Record_UnitNo_Miss(self, unit_no)
    }
    #[inline]
    pub unsafe fn Record_UnitNo_Set(&mut self, unit_no: u8) -> i32 {
        pxtnEvelist_Record_UnitNo_Set(self, unit_no)
    }
    #[inline]
    pub unsafe fn Record_UnitNo_Replace(&mut self, old_u: u8, new_u: u8) -> i32 {
        pxtnEvelist_Record_UnitNo_Replace(self, old_u, new_u)
    }
    #[inline]
    pub unsafe fn BeatClockOperation(&mut self, rate: i32) -> i32 {
        pxtnEvelist_BeatClockOperation(self, rate)
    }
    #[inline]
    pub unsafe fn io_Write(&self, p_doc: *mut pxtnDescriptor, rough: i32) -> bool {
        pxtnEvelist_io_Write(self, p_doc, rough)
    }
    #[inline]
    pub unsafe fn io_Read(&mut self, p_doc: *mut pxtnDescriptor) -> pxtnERR {
        pxtnEvelist_io_Read(self, p_doc)
    }
    #[inline]
    pub unsafe fn io_Read_EventNum(&self, p_doc: *mut pxtnDescriptor) -> i32 {
        pxtnEvelist_io_Read_EventNum(self, p_doc)
    }
    #[inline]
    pub unsafe fn x4x_Read_Start(&mut self) -> bool {
        pxtnEvelist_x4x_Read_Start(self)
    }
    #[inline]
    pub unsafe fn x4x_Read_NewKind(&mut self) {
        pxtnEvelist_x4x_Read_NewKind(self)
    }
    #[inline]
    pub unsafe fn x4x_Read_Add(&mut self, clock: i32, unit_no: u8, kind: u8, value: i32) {
        pxtnEvelist_x4x_Read_Add(self, clock, unit_no, kind, value)
    }
    #[inline]
    pub unsafe fn io_Unit_Read_x4x_EVENT(
        &mut self,
        p_doc: *mut pxtnDescriptor,
        bTailAbsolute: bool,
        bCheckRRR: bool,
    ) -> pxtnERR {
        pxtnEvelist_io_Unit_Read_x4x_EVENT(self, p_doc, bTailAbsolute, bCheckRRR)
    }
    #[inline]
    pub unsafe fn io_Read_x4x_EventNum(
        &self,
        p_doc: *mut pxtnDescriptor,
        p_num: *mut i32,
    ) -> pxtnERR {
        pxtnEvelist_io_Read_x4x_EventNum(self, p_doc, p_num)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        pxtnEvelist_pxtnEvelist(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        pxtnEvelist_pxtnEvelist_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}?Evelist_Kind_IsTail@@YA_NH@Z"]
    pub fn Evelist_Kind_IsTail(kind: i32) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pxtnVOMITPREPARATION {
    pub start_pos_meas: i32,
    pub start_pos_sample: i32,
    pub start_pos_float: f32,
    pub meas_end: i32,
    pub meas_repeat: i32,
    pub fadein_sec: f32,
    pub flags: u32,
    pub master_volume: f32,
}
#[test]
fn bindgen_test_layout_pxtnVOMITPREPARATION() {
    assert_eq!(
        ::std::mem::size_of::<pxtnVOMITPREPARATION>(),
        32usize,
        concat!("Size of: ", stringify!(pxtnVOMITPREPARATION))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnVOMITPREPARATION>(),
        4usize,
        concat!("Alignment of ", stringify!(pxtnVOMITPREPARATION))
    );
    fn test_field_start_pos_meas() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOMITPREPARATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start_pos_meas) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOMITPREPARATION),
                "::",
                stringify!(start_pos_meas)
            )
        );
    }
    test_field_start_pos_meas();
    fn test_field_start_pos_sample() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOMITPREPARATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start_pos_sample) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOMITPREPARATION),
                "::",
                stringify!(start_pos_sample)
            )
        );
    }
    test_field_start_pos_sample();
    fn test_field_start_pos_float() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOMITPREPARATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start_pos_float) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOMITPREPARATION),
                "::",
                stringify!(start_pos_float)
            )
        );
    }
    test_field_start_pos_float();
    fn test_field_meas_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOMITPREPARATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).meas_end) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOMITPREPARATION),
                "::",
                stringify!(meas_end)
            )
        );
    }
    test_field_meas_end();
    fn test_field_meas_repeat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOMITPREPARATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).meas_repeat) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOMITPREPARATION),
                "::",
                stringify!(meas_repeat)
            )
        );
    }
    test_field_meas_repeat();
    fn test_field_fadein_sec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOMITPREPARATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fadein_sec) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOMITPREPARATION),
                "::",
                stringify!(fadein_sec)
            )
        );
    }
    test_field_fadein_sec();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOMITPREPARATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOMITPREPARATION),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_master_volume() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnVOMITPREPARATION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).master_volume) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnVOMITPREPARATION),
                "::",
                stringify!(master_volume)
            )
        );
    }
    test_field_master_volume();
}
pub type pxtnSampledCallback = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, pxtn: *const pxtnService) -> bool,
>;
#[repr(C)]
#[derive(Debug)]
pub struct pxtnService {
    pub _b_init: bool,
    pub _b_edit: bool,
    pub _b_fix_evels_num: bool,
    pub _dst_ch_num: i32,
    pub _dst_sps: i32,
    pub _dst_byte_per_smp: i32,
    pub _ptn_bldr: *mut pxtnPulse_NoiseBuilder,
    pub _delay_max: i32,
    pub _delay_num: i32,
    pub _delays: *mut *mut pxtnDelay,
    pub _ovdrv_max: i32,
    pub _ovdrv_num: i32,
    pub _ovdrvs: *mut *mut pxtnOverDrive,
    pub _woice_max: i32,
    pub _woice_num: i32,
    pub _woices: *mut *mut pxtnWoice,
    pub _unit_max: i32,
    pub _unit_num: i32,
    pub _units: *mut *mut pxtnUnit,
    pub _group_num: i32,
    #[doc = ""]
    pub _moo_b_valid_data: bool,
    pub _moo_b_end_vomit: bool,
    pub _moo_b_init: bool,
    pub _moo_b_mute_by_unit: bool,
    pub _moo_b_loop: bool,
    pub _moo_smp_smooth: i32,
    pub _moo_clock_rate: f32,
    pub _moo_smp_count: i32,
    pub _moo_smp_start: i32,
    pub _moo_smp_end: i32,
    pub _moo_smp_repeat: i32,
    pub _moo_fade_count: i32,
    pub _moo_fade_max: i32,
    pub _moo_fade_fade: i32,
    pub _moo_master_vol: f32,
    pub _moo_top: i32,
    pub _moo_smp_stride: f32,
    pub _moo_time_pan_index: i32,
    pub _moo_bt_tempo: f32,
    pub _moo_bt_clock: i32,
    pub _moo_bt_num: i32,
    pub _moo_group_smps: *mut i32,
    pub _moo_p_eve: *const EVERECORD,
    pub _moo_freq: *mut pxtnPulse_Frequency,
    pub _sampled_proc: pxtnSampledCallback,
    pub _sampled_user: *mut ::std::os::raw::c_void,
    pub text: *mut pxtnText,
    pub master: *mut pxtnMaster,
    pub evels: *mut pxtnEvelist,
}
pub const pxtnService__enum_FMTVER__enum_FMTVER_unknown: pxtnService__enum_FMTVER = 0;
pub const pxtnService__enum_FMTVER__enum_FMTVER_x1x: pxtnService__enum_FMTVER = 1;
pub const pxtnService__enum_FMTVER__enum_FMTVER_x2x: pxtnService__enum_FMTVER = 2;
pub const pxtnService__enum_FMTVER__enum_FMTVER_x3x: pxtnService__enum_FMTVER = 3;
pub const pxtnService__enum_FMTVER__enum_FMTVER_x4x: pxtnService__enum_FMTVER = 4;
pub const pxtnService__enum_FMTVER__enum_FMTVER_v5: pxtnService__enum_FMTVER = 5;
pub type pxtnService__enum_FMTVER = ::std::os::raw::c_int;
#[test]
fn bindgen_test_layout_pxtnService() {
    assert_eq!(
        ::std::mem::size_of::<pxtnService>(),
        232usize,
        concat!("Size of: ", stringify!(pxtnService))
    );
    assert_eq!(
        ::std::mem::align_of::<pxtnService>(),
        8usize,
        concat!("Alignment of ", stringify!(pxtnService))
    );
    fn test_field__b_init() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._b_init) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_b_init)
            )
        );
    }
    test_field__b_init();
    fn test_field__b_edit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._b_edit) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_b_edit)
            )
        );
    }
    test_field__b_edit();
    fn test_field__b_fix_evels_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._b_fix_evels_num) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_b_fix_evels_num)
            )
        );
    }
    test_field__b_fix_evels_num();
    fn test_field__dst_ch_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._dst_ch_num) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_dst_ch_num)
            )
        );
    }
    test_field__dst_ch_num();
    fn test_field__dst_sps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._dst_sps) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_dst_sps)
            )
        );
    }
    test_field__dst_sps();
    fn test_field__dst_byte_per_smp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._dst_byte_per_smp) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_dst_byte_per_smp)
            )
        );
    }
    test_field__dst_byte_per_smp();
    fn test_field__ptn_bldr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._ptn_bldr) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_ptn_bldr)
            )
        );
    }
    test_field__ptn_bldr();
    fn test_field__delay_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._delay_max) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_delay_max)
            )
        );
    }
    test_field__delay_max();
    fn test_field__delay_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._delay_num) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_delay_num)
            )
        );
    }
    test_field__delay_num();
    fn test_field__delays() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._delays) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_delays)
            )
        );
    }
    test_field__delays();
    fn test_field__ovdrv_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._ovdrv_max) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_ovdrv_max)
            )
        );
    }
    test_field__ovdrv_max();
    fn test_field__ovdrv_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._ovdrv_num) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_ovdrv_num)
            )
        );
    }
    test_field__ovdrv_num();
    fn test_field__ovdrvs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._ovdrvs) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_ovdrvs)
            )
        );
    }
    test_field__ovdrvs();
    fn test_field__woice_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._woice_max) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_woice_max)
            )
        );
    }
    test_field__woice_max();
    fn test_field__woice_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._woice_num) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_woice_num)
            )
        );
    }
    test_field__woice_num();
    fn test_field__woices() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._woices) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_woices)
            )
        );
    }
    test_field__woices();
    fn test_field__unit_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._unit_max) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_unit_max)
            )
        );
    }
    test_field__unit_max();
    fn test_field__unit_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._unit_num) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_unit_num)
            )
        );
    }
    test_field__unit_num();
    fn test_field__units() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._units) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_units)
            )
        );
    }
    test_field__units();
    fn test_field__group_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._group_num) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_group_num)
            )
        );
    }
    test_field__group_num();
    fn test_field__moo_b_valid_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_b_valid_data) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_b_valid_data)
            )
        );
    }
    test_field__moo_b_valid_data();
    fn test_field__moo_b_end_vomit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_b_end_vomit) as usize - ptr as usize
            },
            93usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_b_end_vomit)
            )
        );
    }
    test_field__moo_b_end_vomit();
    fn test_field__moo_b_init() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_b_init) as usize - ptr as usize
            },
            94usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_b_init)
            )
        );
    }
    test_field__moo_b_init();
    fn test_field__moo_b_mute_by_unit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_b_mute_by_unit) as usize - ptr as usize
            },
            95usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_b_mute_by_unit)
            )
        );
    }
    test_field__moo_b_mute_by_unit();
    fn test_field__moo_b_loop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_b_loop) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_b_loop)
            )
        );
    }
    test_field__moo_b_loop();
    fn test_field__moo_smp_smooth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_smp_smooth) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_smp_smooth)
            )
        );
    }
    test_field__moo_smp_smooth();
    fn test_field__moo_clock_rate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_clock_rate) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_clock_rate)
            )
        );
    }
    test_field__moo_clock_rate();
    fn test_field__moo_smp_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_smp_count) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_smp_count)
            )
        );
    }
    test_field__moo_smp_count();
    fn test_field__moo_smp_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_smp_start) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_smp_start)
            )
        );
    }
    test_field__moo_smp_start();
    fn test_field__moo_smp_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_smp_end) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_smp_end)
            )
        );
    }
    test_field__moo_smp_end();
    fn test_field__moo_smp_repeat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_smp_repeat) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_smp_repeat)
            )
        );
    }
    test_field__moo_smp_repeat();
    fn test_field__moo_fade_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_fade_count) as usize - ptr as usize
            },
            124usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_fade_count)
            )
        );
    }
    test_field__moo_fade_count();
    fn test_field__moo_fade_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_fade_max) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_fade_max)
            )
        );
    }
    test_field__moo_fade_max();
    fn test_field__moo_fade_fade() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_fade_fade) as usize - ptr as usize
            },
            132usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_fade_fade)
            )
        );
    }
    test_field__moo_fade_fade();
    fn test_field__moo_master_vol() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_master_vol) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_master_vol)
            )
        );
    }
    test_field__moo_master_vol();
    fn test_field__moo_top() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_top) as usize - ptr as usize
            },
            140usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_top)
            )
        );
    }
    test_field__moo_top();
    fn test_field__moo_smp_stride() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_smp_stride) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_smp_stride)
            )
        );
    }
    test_field__moo_smp_stride();
    fn test_field__moo_time_pan_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_time_pan_index) as usize - ptr as usize
            },
            148usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_time_pan_index)
            )
        );
    }
    test_field__moo_time_pan_index();
    fn test_field__moo_bt_tempo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_bt_tempo) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_bt_tempo)
            )
        );
    }
    test_field__moo_bt_tempo();
    fn test_field__moo_bt_clock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_bt_clock) as usize - ptr as usize
            },
            156usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_bt_clock)
            )
        );
    }
    test_field__moo_bt_clock();
    fn test_field__moo_bt_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_bt_num) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_bt_num)
            )
        );
    }
    test_field__moo_bt_num();
    fn test_field__moo_group_smps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_group_smps) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_group_smps)
            )
        );
    }
    test_field__moo_group_smps();
    fn test_field__moo_p_eve() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_p_eve) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_p_eve)
            )
        );
    }
    test_field__moo_p_eve();
    fn test_field__moo_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._moo_freq) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_moo_freq)
            )
        );
    }
    test_field__moo_freq();
    fn test_field__sampled_proc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._sampled_proc) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_sampled_proc)
            )
        );
    }
    test_field__sampled_proc();
    fn test_field__sampled_user() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._sampled_user) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(_sampled_user)
            )
        );
    }
    test_field__sampled_user();
    fn test_field_text() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(text)
            )
        );
    }
    test_field_text();
    fn test_field_master() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).master) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(master)
            )
        );
    }
    test_field_master();
    fn test_field_evels() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pxtnService>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).evels) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(pxtnService),
                "::",
                stringify!(evels)
            )
        );
    }
    test_field_evels();
}
extern "C" {
    #[link_name = "\u{1}?init@pxtnService@@QEAA?AW4pxtnERR@@XZ"]
    pub fn pxtnService_init(this: *mut pxtnService) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?init_collage@pxtnService@@QEAA?AW4pxtnERR@@H@Z"]
    pub fn pxtnService_init_collage(this: *mut pxtnService, fix_evels_num: i32) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?clear@pxtnService@@QEAA_NXZ"]
    pub fn pxtnService_clear(this: *mut pxtnService) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?write@pxtnService@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@_NG@Z"]
    pub fn pxtnService_write(
        this: *mut pxtnService,
        p_doc: *mut pxtnDescriptor,
        bTune: bool,
        exe_ver: u16,
    ) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?read@pxtnService@@QEAA?AW4pxtnERR@@PEAVpxtnDescriptor@@@Z"]
    pub fn pxtnService_read(this: *mut pxtnService, p_doc: *mut pxtnDescriptor) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?AdjustMeasNum@pxtnService@@QEAA_NXZ"]
    pub fn pxtnService_AdjustMeasNum(this: *mut pxtnService) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?get_last_error_id@pxtnService@@QEBAHXZ"]
    pub fn pxtnService_get_last_error_id(this: *const pxtnService) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?tones_ready@pxtnService@@QEAA?AW4pxtnERR@@XZ"]
    pub fn pxtnService_tones_ready(this: *mut pxtnService) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?tones_clear@pxtnService@@QEAA_NXZ"]
    pub fn pxtnService_tones_clear(this: *mut pxtnService) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Group_Num@pxtnService@@QEBAHXZ"]
    pub fn pxtnService_Group_Num(this: *const pxtnService) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Delay_Num@pxtnService@@QEBAHXZ"]
    pub fn pxtnService_Delay_Num(this: *const pxtnService) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Delay_Max@pxtnService@@QEBAHXZ"]
    pub fn pxtnService_Delay_Max(this: *const pxtnService) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Delay_Set@pxtnService@@QEAA_NHW4DELAYUNIT@@MMH@Z"]
    pub fn pxtnService_Delay_Set(
        this: *mut pxtnService,
        idx: i32,
        unit: DELAYUNIT,
        freq: f32,
        rate: f32,
        group: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Delay_Add@pxtnService@@QEAA_NW4DELAYUNIT@@MMH@Z"]
    pub fn pxtnService_Delay_Add(
        this: *mut pxtnService,
        unit: DELAYUNIT,
        freq: f32,
        rate: f32,
        group: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Delay_Remove@pxtnService@@QEAA_NH@Z"]
    pub fn pxtnService_Delay_Remove(this: *mut pxtnService, idx: i32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Delay_ReadyTone@pxtnService@@QEAA?AW4pxtnERR@@H@Z"]
    pub fn pxtnService_Delay_ReadyTone(this: *mut pxtnService, idx: i32) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?Delay_Get@pxtnService@@QEAAPEAVpxtnDelay@@H@Z"]
    pub fn pxtnService_Delay_Get(this: *mut pxtnService, idx: i32) -> *mut pxtnDelay;
}
extern "C" {
    #[link_name = "\u{1}?OverDrive_Num@pxtnService@@QEBAHXZ"]
    pub fn pxtnService_OverDrive_Num(this: *const pxtnService) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?OverDrive_Max@pxtnService@@QEBAHXZ"]
    pub fn pxtnService_OverDrive_Max(this: *const pxtnService) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?OverDrive_Set@pxtnService@@QEAA_NHMMH@Z"]
    pub fn pxtnService_OverDrive_Set(
        this: *mut pxtnService,
        idx: i32,
        cut: f32,
        amp: f32,
        group: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?OverDrive_Add@pxtnService@@QEAA_NMMH@Z"]
    pub fn pxtnService_OverDrive_Add(
        this: *mut pxtnService,
        cut: f32,
        amp: f32,
        group: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?OverDrive_Remove@pxtnService@@QEAA_NH@Z"]
    pub fn pxtnService_OverDrive_Remove(this: *mut pxtnService, idx: i32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?OverDrive_ReadyTone@pxtnService@@QEAA_NH@Z"]
    pub fn pxtnService_OverDrive_ReadyTone(this: *mut pxtnService, idx: i32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?OverDrive_Get@pxtnService@@QEAAPEAVpxtnOverDrive@@H@Z"]
    pub fn pxtnService_OverDrive_Get(this: *mut pxtnService, idx: i32) -> *mut pxtnOverDrive;
}
extern "C" {
    #[link_name = "\u{1}?Woice_Num@pxtnService@@QEBAHXZ"]
    pub fn pxtnService_Woice_Num(this: *const pxtnService) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Woice_Max@pxtnService@@QEBAHXZ"]
    pub fn pxtnService_Woice_Max(this: *const pxtnService) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Woice_Get@pxtnService@@QEBAPEBVpxtnWoice@@H@Z"]
    pub fn pxtnService_Woice_Get(this: *const pxtnService, idx: i32) -> *const pxtnWoice;
}
extern "C" {
    #[link_name = "\u{1}?Woice_Get_variable@pxtnService@@QEAAPEAVpxtnWoice@@H@Z"]
    pub fn pxtnService_Woice_Get_variable(this: *mut pxtnService, idx: i32) -> *mut pxtnWoice;
}
extern "C" {
    #[link_name = "\u{1}?Woice_read@pxtnService@@QEAA?AW4pxtnERR@@HPEAVpxtnDescriptor@@W4pxtnWOICETYPE@@@Z"]
    pub fn pxtnService_Woice_read(
        this: *mut pxtnService,
        idx: i32,
        desc: *mut pxtnDescriptor,
        type_: pxtnWOICETYPE,
    ) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?Woice_ReadyTone@pxtnService@@QEAA?AW4pxtnERR@@H@Z"]
    pub fn pxtnService_Woice_ReadyTone(this: *mut pxtnService, idx: i32) -> pxtnERR;
}
extern "C" {
    #[link_name = "\u{1}?Woice_Remove@pxtnService@@QEAA_NH@Z"]
    pub fn pxtnService_Woice_Remove(this: *mut pxtnService, idx: i32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Woice_Replace@pxtnService@@QEAA_NHH@Z"]
    pub fn pxtnService_Woice_Replace(
        this: *mut pxtnService,
        old_place: i32,
        new_place: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Unit_Num@pxtnService@@QEBAHXZ"]
    pub fn pxtnService_Unit_Num(this: *const pxtnService) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Unit_Max@pxtnService@@QEBAHXZ"]
    pub fn pxtnService_Unit_Max(this: *const pxtnService) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?Unit_Get@pxtnService@@QEBAPEBVpxtnUnit@@H@Z"]
    pub fn pxtnService_Unit_Get(this: *const pxtnService, idx: i32) -> *const pxtnUnit;
}
extern "C" {
    #[link_name = "\u{1}?Unit_Get_variable@pxtnService@@QEAAPEAVpxtnUnit@@H@Z"]
    pub fn pxtnService_Unit_Get_variable(this: *mut pxtnService, idx: i32) -> *mut pxtnUnit;
}
extern "C" {
    #[link_name = "\u{1}?Unit_Remove@pxtnService@@QEAA_NH@Z"]
    pub fn pxtnService_Unit_Remove(this: *mut pxtnService, idx: i32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Unit_Replace@pxtnService@@QEAA_NHH@Z"]
    pub fn pxtnService_Unit_Replace(this: *mut pxtnService, old_place: i32, new_place: i32)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Unit_AddNew@pxtnService@@QEAA_NXZ"]
    pub fn pxtnService_Unit_AddNew(this: *mut pxtnService) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Unit_SetOpratedAll@pxtnService@@QEAA_N_N@Z"]
    pub fn pxtnService_Unit_SetOpratedAll(this: *mut pxtnService, b: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Unit_Solo@pxtnService@@QEAA_NH@Z"]
    pub fn pxtnService_Unit_Solo(this: *mut pxtnService, idx: i32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?set_destination_quality@pxtnService@@QEAA_NHH@Z"]
    pub fn pxtnService_set_destination_quality(
        this: *mut pxtnService,
        ch_num: i32,
        sps: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?get_destination_quality@pxtnService@@QEBA_NPEAH0@Z"]
    pub fn pxtnService_get_destination_quality(
        this: *const pxtnService,
        p_ch_num: *mut i32,
        p_sps: *mut i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?set_sampled_callback@pxtnService@@QEAA_NP6A_NPEAXPEBV1@@Z0@Z"]
    pub fn pxtnService_set_sampled_callback(
        this: *mut pxtnService,
        proc_: pxtnSampledCallback,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[doc = ""]
    #[link_name = "\u{1}?moo_is_valid_data@pxtnService@@QEBA_NXZ"]
    pub fn pxtnService_moo_is_valid_data(this: *const pxtnService) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?moo_is_end_vomit@pxtnService@@QEBA_NXZ"]
    pub fn pxtnService_moo_is_end_vomit(this: *const pxtnService) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?moo_set_mute_by_unit@pxtnService@@QEAA_N_N@Z"]
    pub fn pxtnService_moo_set_mute_by_unit(this: *mut pxtnService, b: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?moo_set_loop@pxtnService@@QEAA_N_N@Z"]
    pub fn pxtnService_moo_set_loop(this: *mut pxtnService, b: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?moo_set_fade@pxtnService@@QEAA_NHM@Z"]
    pub fn pxtnService_moo_set_fade(this: *mut pxtnService, fade: i32, sec: f32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?moo_set_master_volume@pxtnService@@QEAA_NM@Z"]
    pub fn pxtnService_moo_set_master_volume(this: *mut pxtnService, v: f32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?moo_get_total_sample@pxtnService@@QEBAHXZ"]
    pub fn pxtnService_moo_get_total_sample(this: *const pxtnService) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?moo_get_now_clock@pxtnService@@QEBAHXZ"]
    pub fn pxtnService_moo_get_now_clock(this: *const pxtnService) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?moo_get_end_clock@pxtnService@@QEBAHXZ"]
    pub fn pxtnService_moo_get_end_clock(this: *const pxtnService) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?moo_get_sampling_offset@pxtnService@@QEBAHXZ"]
    pub fn pxtnService_moo_get_sampling_offset(this: *const pxtnService) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?moo_get_sampling_end@pxtnService@@QEBAHXZ"]
    pub fn pxtnService_moo_get_sampling_end(this: *const pxtnService) -> i32;
}
extern "C" {
    #[link_name = "\u{1}?moo_preparation@pxtnService@@QEAA_NPEBUpxtnVOMITPREPARATION@@@Z"]
    pub fn pxtnService_moo_preparation(
        this: *mut pxtnService,
        p_build: *const pxtnVOMITPREPARATION,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Moo@pxtnService@@QEAA_NPEAXH@Z"]
    pub fn pxtnService_Moo(
        this: *mut pxtnService,
        p_buf: *mut ::std::os::raw::c_void,
        size: i32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}??0pxtnService@@QEAA@XZ"]
    pub fn pxtnService_pxtnService(this: *mut pxtnService);
}
extern "C" {
    #[link_name = "\u{1}??_DpxtnService@@QEAAXXZ"]
    pub fn pxtnService_pxtnService_destructor(this: *mut pxtnService);
}
impl pxtnService {
    #[inline]
    pub unsafe fn init(&mut self) -> pxtnERR {
        pxtnService_init(self)
    }
    #[inline]
    pub unsafe fn init_collage(&mut self, fix_evels_num: i32) -> pxtnERR {
        pxtnService_init_collage(self, fix_evels_num)
    }
    #[inline]
    pub unsafe fn clear(&mut self) -> bool {
        pxtnService_clear(self)
    }
    #[inline]
    pub unsafe fn write(
        &mut self,
        p_doc: *mut pxtnDescriptor,
        bTune: bool,
        exe_ver: u16,
    ) -> pxtnERR {
        pxtnService_write(self, p_doc, bTune, exe_ver)
    }
    #[inline]
    pub unsafe fn read(&mut self, p_doc: *mut pxtnDescriptor) -> pxtnERR {
        pxtnService_read(self, p_doc)
    }
    #[inline]
    pub unsafe fn AdjustMeasNum(&mut self) -> bool {
        pxtnService_AdjustMeasNum(self)
    }
    #[inline]
    pub unsafe fn get_last_error_id(&self) -> i32 {
        pxtnService_get_last_error_id(self)
    }
    #[inline]
    pub unsafe fn tones_ready(&mut self) -> pxtnERR {
        pxtnService_tones_ready(self)
    }
    #[inline]
    pub unsafe fn tones_clear(&mut self) -> bool {
        pxtnService_tones_clear(self)
    }
    #[inline]
    pub unsafe fn Group_Num(&self) -> i32 {
        pxtnService_Group_Num(self)
    }
    #[inline]
    pub unsafe fn Delay_Num(&self) -> i32 {
        pxtnService_Delay_Num(self)
    }
    #[inline]
    pub unsafe fn Delay_Max(&self) -> i32 {
        pxtnService_Delay_Max(self)
    }
    #[inline]
    pub unsafe fn Delay_Set(
        &mut self,
        idx: i32,
        unit: DELAYUNIT,
        freq: f32,
        rate: f32,
        group: i32,
    ) -> bool {
        pxtnService_Delay_Set(self, idx, unit, freq, rate, group)
    }
    #[inline]
    pub unsafe fn Delay_Add(&mut self, unit: DELAYUNIT, freq: f32, rate: f32, group: i32) -> bool {
        pxtnService_Delay_Add(self, unit, freq, rate, group)
    }
    #[inline]
    pub unsafe fn Delay_Remove(&mut self, idx: i32) -> bool {
        pxtnService_Delay_Remove(self, idx)
    }
    #[inline]
    pub unsafe fn Delay_ReadyTone(&mut self, idx: i32) -> pxtnERR {
        pxtnService_Delay_ReadyTone(self, idx)
    }
    #[inline]
    pub unsafe fn Delay_Get(&mut self, idx: i32) -> *mut pxtnDelay {
        pxtnService_Delay_Get(self, idx)
    }
    #[inline]
    pub unsafe fn OverDrive_Num(&self) -> i32 {
        pxtnService_OverDrive_Num(self)
    }
    #[inline]
    pub unsafe fn OverDrive_Max(&self) -> i32 {
        pxtnService_OverDrive_Max(self)
    }
    #[inline]
    pub unsafe fn OverDrive_Set(&mut self, idx: i32, cut: f32, amp: f32, group: i32) -> bool {
        pxtnService_OverDrive_Set(self, idx, cut, amp, group)
    }
    #[inline]
    pub unsafe fn OverDrive_Add(&mut self, cut: f32, amp: f32, group: i32) -> bool {
        pxtnService_OverDrive_Add(self, cut, amp, group)
    }
    #[inline]
    pub unsafe fn OverDrive_Remove(&mut self, idx: i32) -> bool {
        pxtnService_OverDrive_Remove(self, idx)
    }
    #[inline]
    pub unsafe fn OverDrive_ReadyTone(&mut self, idx: i32) -> bool {
        pxtnService_OverDrive_ReadyTone(self, idx)
    }
    #[inline]
    pub unsafe fn OverDrive_Get(&mut self, idx: i32) -> *mut pxtnOverDrive {
        pxtnService_OverDrive_Get(self, idx)
    }
    #[inline]
    pub unsafe fn Woice_Num(&self) -> i32 {
        pxtnService_Woice_Num(self)
    }
    #[inline]
    pub unsafe fn Woice_Max(&self) -> i32 {
        pxtnService_Woice_Max(self)
    }
    #[inline]
    pub unsafe fn Woice_Get(&self, idx: i32) -> *const pxtnWoice {
        pxtnService_Woice_Get(self, idx)
    }
    #[inline]
    pub unsafe fn Woice_Get_variable(&mut self, idx: i32) -> *mut pxtnWoice {
        pxtnService_Woice_Get_variable(self, idx)
    }
    #[inline]
    pub unsafe fn Woice_read(
        &mut self,
        idx: i32,
        desc: *mut pxtnDescriptor,
        type_: pxtnWOICETYPE,
    ) -> pxtnERR {
        pxtnService_Woice_read(self, idx, desc, type_)
    }
    #[inline]
    pub unsafe fn Woice_ReadyTone(&mut self, idx: i32) -> pxtnERR {
        pxtnService_Woice_ReadyTone(self, idx)
    }
    #[inline]
    pub unsafe fn Woice_Remove(&mut self, idx: i32) -> bool {
        pxtnService_Woice_Remove(self, idx)
    }
    #[inline]
    pub unsafe fn Woice_Replace(&mut self, old_place: i32, new_place: i32) -> bool {
        pxtnService_Woice_Replace(self, old_place, new_place)
    }
    #[inline]
    pub unsafe fn Unit_Num(&self) -> i32 {
        pxtnService_Unit_Num(self)
    }
    #[inline]
    pub unsafe fn Unit_Max(&self) -> i32 {
        pxtnService_Unit_Max(self)
    }
    #[inline]
    pub unsafe fn Unit_Get(&self, idx: i32) -> *const pxtnUnit {
        pxtnService_Unit_Get(self, idx)
    }
    #[inline]
    pub unsafe fn Unit_Get_variable(&mut self, idx: i32) -> *mut pxtnUnit {
        pxtnService_Unit_Get_variable(self, idx)
    }
    #[inline]
    pub unsafe fn Unit_Remove(&mut self, idx: i32) -> bool {
        pxtnService_Unit_Remove(self, idx)
    }
    #[inline]
    pub unsafe fn Unit_Replace(&mut self, old_place: i32, new_place: i32) -> bool {
        pxtnService_Unit_Replace(self, old_place, new_place)
    }
    #[inline]
    pub unsafe fn Unit_AddNew(&mut self) -> bool {
        pxtnService_Unit_AddNew(self)
    }
    #[inline]
    pub unsafe fn Unit_SetOpratedAll(&mut self, b: bool) -> bool {
        pxtnService_Unit_SetOpratedAll(self, b)
    }
    #[inline]
    pub unsafe fn Unit_Solo(&mut self, idx: i32) -> bool {
        pxtnService_Unit_Solo(self, idx)
    }
    #[inline]
    pub unsafe fn set_destination_quality(&mut self, ch_num: i32, sps: i32) -> bool {
        pxtnService_set_destination_quality(self, ch_num, sps)
    }
    #[inline]
    pub unsafe fn get_destination_quality(&self, p_ch_num: *mut i32, p_sps: *mut i32) -> bool {
        pxtnService_get_destination_quality(self, p_ch_num, p_sps)
    }
    #[inline]
    pub unsafe fn set_sampled_callback(
        &mut self,
        proc_: pxtnSampledCallback,
        user: *mut ::std::os::raw::c_void,
    ) -> bool {
        pxtnService_set_sampled_callback(self, proc_, user)
    }
    #[inline]
    pub unsafe fn moo_is_valid_data(&self) -> bool {
        pxtnService_moo_is_valid_data(self)
    }
    #[inline]
    pub unsafe fn moo_is_end_vomit(&self) -> bool {
        pxtnService_moo_is_end_vomit(self)
    }
    #[inline]
    pub unsafe fn moo_set_mute_by_unit(&mut self, b: bool) -> bool {
        pxtnService_moo_set_mute_by_unit(self, b)
    }
    #[inline]
    pub unsafe fn moo_set_loop(&mut self, b: bool) -> bool {
        pxtnService_moo_set_loop(self, b)
    }
    #[inline]
    pub unsafe fn moo_set_fade(&mut self, fade: i32, sec: f32) -> bool {
        pxtnService_moo_set_fade(self, fade, sec)
    }
    #[inline]
    pub unsafe fn moo_set_master_volume(&mut self, v: f32) -> bool {
        pxtnService_moo_set_master_volume(self, v)
    }
    #[inline]
    pub unsafe fn moo_get_total_sample(&self) -> i32 {
        pxtnService_moo_get_total_sample(self)
    }
    #[inline]
    pub unsafe fn moo_get_now_clock(&self) -> i32 {
        pxtnService_moo_get_now_clock(self)
    }
    #[inline]
    pub unsafe fn moo_get_end_clock(&self) -> i32 {
        pxtnService_moo_get_end_clock(self)
    }
    #[inline]
    pub unsafe fn moo_get_sampling_offset(&self) -> i32 {
        pxtnService_moo_get_sampling_offset(self)
    }
    #[inline]
    pub unsafe fn moo_get_sampling_end(&self) -> i32 {
        pxtnService_moo_get_sampling_end(self)
    }
    #[inline]
    pub unsafe fn moo_preparation(&mut self, p_build: *const pxtnVOMITPREPARATION) -> bool {
        pxtnService_moo_preparation(self, p_build)
    }
    #[inline]
    pub unsafe fn Moo(&mut self, p_buf: *mut ::std::os::raw::c_void, size: i32) -> bool {
        pxtnService_Moo(self, p_buf, size)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        pxtnService_pxtnService(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        pxtnService_pxtnService_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}?pxtnService_moo_CalcSampleNum@@YAHHHHM@Z"]
    pub fn pxtnService_moo_CalcSampleNum(
        meas_num: i32,
        beat_num: i32,
        sps: i32,
        beat_tempo: f32,
    ) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
